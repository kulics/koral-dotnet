//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KoralParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compiler.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class KoralParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Arrow=1, BackArrow=2, EqualEqual=3, NotEqual=4, LessEqual=5, GreaterEqual=6, 
		Dot=7, Comma=8, Equal=9, Less=10, Greater=11, SemiColon=12, Colon=13, 
		LeftParen=14, RightParen=15, LeftBrace=16, RightBrace=17, LeftBrack=18, 
		RightBrack=19, Question=20, At=21, Bang=22, Coin=23, Tilde=24, Add=25, 
		Sub=26, Mul=27, Div=28, Mod=29, BitAnd=30, BitOr=31, Caret=32, BackQuote=33, 
		Sharp=34, Mut=35, Let=36, Export=37, If=38, Else=39, While=40, Break=41, 
		Continue=42, Return=43, For=44, And=45, Or=46, Not=47, Is=48, As=49, In=50, 
		Out=51, True=52, False=53, Type=54, With=55, Given=56, FloatLiteral=57, 
		DecimalLiteral=58, BinaryLiteral=59, OctalLiteral=60, HexLiteral=61, RuneLiteral=62, 
		StringLiteral=63, UpperIdentifier=64, LowerIdentifier=65, Discard=66, 
		CommentBlock=67, CommentLine=68, NewLine=69, WhiteSpace=70, Fn=71;
	public const int
		RULE_program = 0, RULE_moduleDeclaration = 1, RULE_globalDeclaration = 2, 
		RULE_globalVariableDeclaration = 3, RULE_globalFunctionDeclaration = 4, 
		RULE_globalRecordDeclaration = 5, RULE_globalInterfaceDeclaration = 6, 
		RULE_globalExtensionDeclaration = 7, RULE_globalSumTypeDeclaration = 8, 
		RULE_recordConstructor = 9, RULE_typeParameterList = 10, RULE_typeParameter = 11, 
		RULE_parameterList = 12, RULE_parameter = 13, RULE_fieldList = 14, RULE_field = 15, 
		RULE_methodList = 16, RULE_method = 17, RULE_virtualMethodList = 18, RULE_virtualMethod = 19, 
		RULE_statement = 20, RULE_expressionOrControl = 21, RULE_breakExpression = 22, 
		RULE_continueExpression = 23, RULE_returnExpression = 24, RULE_breakStatement = 25, 
		RULE_continueStatement = 26, RULE_returnStatement = 27, RULE_expressionStatement = 28, 
		RULE_expressionWithTerminator = 29, RULE_expression = 30, RULE_expressionWithBlock = 31, 
		RULE_variableDeclaration = 32, RULE_functionDeclaration = 33, RULE_memberAccessCallSuffix = 34, 
		RULE_callSuffix = 35, RULE_memberAccess = 36, RULE_assignmentExpression = 37, 
		RULE_assignmentExpressionWithBlock = 38, RULE_lambdaExpression = 39, RULE_ifThenExpression = 40, 
		RULE_ifThenExpressionWithBlock = 41, RULE_ifThenElseExpression = 42, RULE_ifThenElseExpressionWithBlock = 43, 
		RULE_whileThenExpression = 44, RULE_whileThenExpressionWithBlock = 45, 
		RULE_whileThenElseExpression = 46, RULE_whileThenElseExpressionWithBlock = 47, 
		RULE_condition = 48, RULE_blockExpression = 49, RULE_pattern = 50, RULE_typePattern = 51, 
		RULE_deconstructPattern = 52, RULE_identifierPattern = 53, RULE_wildcardPattern = 54, 
		RULE_literalPattern = 55, RULE_primaryExpression = 56, RULE_constructExpression = 57, 
		RULE_functionCallExpression = 58, RULE_literalExpression = 59, RULE_type = 60, 
		RULE_functionType = 61, RULE_typeIdentifier = 62, RULE_variableIdentifier = 63, 
		RULE_stringExpression = 64, RULE_runeExpression = 65, RULE_floatExpression = 66, 
		RULE_boolExpression = 67, RULE_integerExpression = 68, RULE_multiplicativeOperator = 69, 
		RULE_additiveOperator = 70, RULE_logicAndOperator = 71, RULE_logicOrOperator = 72, 
		RULE_compareOperator = 73;
	public static readonly string[] ruleNames = {
		"program", "moduleDeclaration", "globalDeclaration", "globalVariableDeclaration", 
		"globalFunctionDeclaration", "globalRecordDeclaration", "globalInterfaceDeclaration", 
		"globalExtensionDeclaration", "globalSumTypeDeclaration", "recordConstructor", 
		"typeParameterList", "typeParameter", "parameterList", "parameter", "fieldList", 
		"field", "methodList", "method", "virtualMethodList", "virtualMethod", 
		"statement", "expressionOrControl", "breakExpression", "continueExpression", 
		"returnExpression", "breakStatement", "continueStatement", "returnStatement", 
		"expressionStatement", "expressionWithTerminator", "expression", "expressionWithBlock", 
		"variableDeclaration", "functionDeclaration", "memberAccessCallSuffix", 
		"callSuffix", "memberAccess", "assignmentExpression", "assignmentExpressionWithBlock", 
		"lambdaExpression", "ifThenExpression", "ifThenExpressionWithBlock", "ifThenElseExpression", 
		"ifThenElseExpressionWithBlock", "whileThenExpression", "whileThenExpressionWithBlock", 
		"whileThenElseExpression", "whileThenElseExpressionWithBlock", "condition", 
		"blockExpression", "pattern", "typePattern", "deconstructPattern", "identifierPattern", 
		"wildcardPattern", "literalPattern", "primaryExpression", "constructExpression", 
		"functionCallExpression", "literalExpression", "type", "functionType", 
		"typeIdentifier", "variableIdentifier", "stringExpression", "runeExpression", 
		"floatExpression", "boolExpression", "integerExpression", "multiplicativeOperator", 
		"additiveOperator", "logicAndOperator", "logicOrOperator", "compareOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'->'", "'<-'", "'=='", "'!='", "'<='", "'>='", "'.'", "','", "'='", 
		"'<'", "'>'", "';'", "':'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"'?'", "'@'", "'!'", "'$'", "'~'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'&'", "'|'", "'^'", "'`'", "'#'", "'mut'", "'let'", "'export'", "'if'", 
		"'else'", "'while'", "'break'", "'continue'", "'return'", "'for'", "'and'", 
		"'or'", "'not'", "'is'", "'as'", "'in'", "'out'", "'true'", "'false'", 
		"'type'", "'with'", "'given'", null, null, null, null, null, null, null, 
		null, null, "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Arrow", "BackArrow", "EqualEqual", "NotEqual", "LessEqual", "GreaterEqual", 
		"Dot", "Comma", "Equal", "Less", "Greater", "SemiColon", "Colon", "LeftParen", 
		"RightParen", "LeftBrace", "RightBrace", "LeftBrack", "RightBrack", "Question", 
		"At", "Bang", "Coin", "Tilde", "Add", "Sub", "Mul", "Div", "Mod", "BitAnd", 
		"BitOr", "Caret", "BackQuote", "Sharp", "Mut", "Let", "Export", "If", 
		"Else", "While", "Break", "Continue", "Return", "For", "And", "Or", "Not", 
		"Is", "As", "In", "Out", "True", "False", "Type", "With", "Given", "FloatLiteral", 
		"DecimalLiteral", "BinaryLiteral", "OctalLiteral", "HexLiteral", "RuneLiteral", 
		"StringLiteral", "UpperIdentifier", "LowerIdentifier", "Discard", "CommentBlock", 
		"CommentLine", "NewLine", "WhiteSpace", "Fn"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KoralParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KoralParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KoralParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KoralParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleDeclarationContext moduleDeclaration() {
			return GetRuleContext<ModuleDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(KoralParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext[] globalDeclaration() {
			return GetRuleContexts<GlobalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext globalDeclaration(int i) {
			return GetRuleContext<GlobalDeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			moduleDeclaration();
			State = 152;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 149;
					Match(NewLine);
					}
					} 
				}
				State = 154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 170;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 155;
						Match(NewLine);
						}
						}
						State = 160;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 161;
					globalDeclaration();
					State = 165;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 162;
							Match(NewLine);
							}
							} 
						}
						State = 167;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
					}
					}
					} 
				}
				State = 172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 173;
				Match(NewLine);
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 179;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(KoralParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(KoralParser.SemiColon, 0); }
		public ModuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationContext moduleDeclaration() {
		ModuleDeclarationContext _localctx = new ModuleDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_moduleDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(Export);
			State = 182;
			variableIdentifier();
			State = 183;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclarationContext globalVariableDeclaration() {
			return GetRuleContext<GlobalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalFunctionDeclarationContext globalFunctionDeclaration() {
			return GetRuleContext<GlobalFunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalRecordDeclarationContext globalRecordDeclaration() {
			return GetRuleContext<GlobalRecordDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalSumTypeDeclarationContext globalSumTypeDeclaration() {
			return GetRuleContext<GlobalSumTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalInterfaceDeclarationContext globalInterfaceDeclaration() {
			return GetRuleContext<GlobalInterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalExtensionDeclarationContext globalExtensionDeclaration() {
			return GetRuleContext<GlobalExtensionDeclarationContext>(0);
		}
		public GlobalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalDeclarationContext globalDeclaration() {
		GlobalDeclarationContext _localctx = new GlobalDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_globalDeclaration);
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185;
				globalVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186;
				globalFunctionDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 187;
				globalRecordDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 188;
				globalSumTypeDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 189;
				globalInterfaceDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 190;
				globalExtensionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(KoralParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(KoralParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTerminatorContext expressionWithTerminator() {
			return GetRuleContext<ExpressionWithTerminatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mut() { return GetToken(KoralParser.Mut, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public GlobalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableDeclarationContext globalVariableDeclaration() {
		GlobalVariableDeclarationContext _localctx = new GlobalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_globalVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(Let);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mut) {
				{
				State = 194;
				Match(Mut);
				}
			}

			State = 197;
			variableIdentifier();
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & 9077567998918657L) != 0)) {
				{
				State = 198;
				type();
				}
			}

			State = 201;
			Match(Equal);
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 202;
				Match(NewLine);
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 208;
			expressionWithTerminator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(KoralParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(KoralParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTerminatorContext expressionWithTerminator() {
			return GetRuleContext<ExpressionWithTerminatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public GlobalFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalFunctionDeclarationContext globalFunctionDeclaration() {
		GlobalFunctionDeclarationContext _localctx = new GlobalFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_globalFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(Let);
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBrack) {
				{
				State = 211;
				typeParameterList();
				}
			}

			State = 214;
			variableIdentifier();
			State = 215;
			parameterList();
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & 9077567998918657L) != 0)) {
				{
				State = 216;
				type();
				}
			}

			State = 219;
			Match(Equal);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 220;
				Match(NewLine);
				}
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 226;
			expressionWithTerminator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalRecordDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(KoralParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldListContext fieldList() {
			return GetRuleContext<FieldListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(KoralParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(KoralParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodListContext methodList() {
			return GetRuleContext<MethodListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mut() { return GetToken(KoralParser.Mut, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(KoralParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public GlobalRecordDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalRecordDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalRecordDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalRecordDeclarationContext globalRecordDeclaration() {
		GlobalRecordDeclarationContext _localctx = new GlobalRecordDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_globalRecordDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(Type);
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mut) {
				{
				State = 229;
				Match(Mut);
				}
			}

			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBrack) {
				{
				State = 232;
				typeParameterList();
				}
			}

			State = 235;
			typeIdentifier();
			State = 236;
			fieldList();
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Is) {
				{
				State = 237;
				Match(Is);
				State = 238;
				type();
				}
			}

			State = 244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SemiColon:
				{
				State = 241;
				Match(SemiColon);
				}
				break;
			case With:
				{
				State = 242;
				Match(With);
				State = 243;
				methodList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalInterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(KoralParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(KoralParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(KoralParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VirtualMethodListContext virtualMethodList() {
			return GetRuleContext<VirtualMethodListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public GlobalInterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalInterfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalInterfaceDeclarationContext globalInterfaceDeclaration() {
		GlobalInterfaceDeclarationContext _localctx = new GlobalInterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_globalInterfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			Match(Type);
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBrack) {
				{
				State = 247;
				typeParameterList();
				}
			}

			State = 250;
			typeIdentifier();
			State = 260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SemiColon:
				{
				State = 251;
				Match(SemiColon);
				}
				break;
			case Equal:
				{
				State = 252;
				Match(Equal);
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 253;
					Match(NewLine);
					}
					}
					State = 258;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 259;
				virtualMethodList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalExtensionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Given() { return GetToken(KoralParser.Given, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(KoralParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodListContext methodList() {
			return GetRuleContext<MethodListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(KoralParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(KoralParser.SemiColon, 0); }
		public GlobalExtensionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalExtensionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalExtensionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalExtensionDeclarationContext globalExtensionDeclaration() {
		GlobalExtensionDeclarationContext _localctx = new GlobalExtensionDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_globalExtensionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(Given);
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBrack) {
				{
				State = 263;
				typeParameterList();
				}
			}

			State = 266;
			typeIdentifier();
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Is) {
				{
				State = 267;
				Match(Is);
				State = 268;
				type();
				}
			}

			State = 271;
			Match(With);
			State = 272;
			methodList();
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SemiColon) {
				{
				State = 273;
				Match(SemiColon);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalSumTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(KoralParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(KoralParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(KoralParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordConstructorContext[] recordConstructor() {
			return GetRuleContexts<RecordConstructorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordConstructorContext recordConstructor(int i) {
			return GetRuleContext<RecordConstructorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(KoralParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(KoralParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(KoralParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(KoralParser.SemiColon, 0); }
		public GlobalSumTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalSumTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalSumTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalSumTypeDeclarationContext globalSumTypeDeclaration() {
		GlobalSumTypeDeclarationContext _localctx = new GlobalSumTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_globalSumTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(Type);
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBrack) {
				{
				State = 277;
				typeParameterList();
				}
			}

			State = 280;
			typeIdentifier();
			State = 281;
			Match(Equal);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 282;
				Match(NewLine);
				}
				}
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 288;
			Match(LeftBrace);
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 289;
				Match(NewLine);
				}
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 295;
			recordConstructor();
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 296;
				Match(Comma);
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 297;
					Match(NewLine);
					}
					}
					State = 302;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 303;
				recordConstructor();
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 309;
				Match(NewLine);
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 315;
			Match(RightBrace);
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SemiColon) {
				{
				State = 316;
				Match(SemiColon);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldListContext fieldList() {
			return GetRuleContext<FieldListContext>(0);
		}
		public RecordConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordConstructorContext recordConstructor() {
		RecordConstructorContext _localctx = new RecordConstructorContext(Context, State);
		EnterRule(_localctx, 18, RULE_recordConstructor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			typeIdentifier();
			State = 320;
			fieldList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrack() { return GetToken(KoralParser.LeftBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrack() { return GetToken(KoralParser.RightBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(KoralParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(KoralParser.Comma, i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(LeftBrack);
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 323;
				Match(NewLine);
				}
				}
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 329;
			typeParameter();
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 330;
				Match(Comma);
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 331;
					Match(NewLine);
					}
					}
					State = 336;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 337;
				typeParameter();
				}
				}
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 343;
				Match(NewLine);
				}
				}
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 349;
			Match(RightBrack);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			typeIdentifier();
			State = 352;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(KoralParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(KoralParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(KoralParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(KoralParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameterList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			Match(LeftParen);
			State = 358;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 355;
					Match(NewLine);
					}
					} 
				}
				State = 360;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LowerIdentifier) {
				{
				State = 361;
				parameter();
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 362;
					Match(Comma);
					State = 366;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 363;
						Match(NewLine);
						}
						}
						State = 368;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 369;
					parameter();
					}
					}
					State = 374;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 377;
				Match(NewLine);
				}
				}
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 383;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			variableIdentifier();
			State = 386;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(KoralParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(KoralParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(KoralParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(KoralParser.Comma, i);
		}
		public FieldListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldListContext fieldList() {
		FieldListContext _localctx = new FieldListContext(Context, State);
		EnterRule(_localctx, 28, RULE_fieldList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			Match(LeftParen);
			State = 392;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 389;
					Match(NewLine);
					}
					} 
				}
				State = 394;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mut || _la==LowerIdentifier) {
				{
				State = 395;
				field();
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 396;
					Match(Comma);
					State = 400;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 397;
						Match(NewLine);
						}
						}
						State = 402;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 403;
					field();
					}
					}
					State = 408;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 411;
				Match(NewLine);
				}
				}
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 417;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mut() { return GetToken(KoralParser.Mut, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 30, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mut) {
				{
				State = 419;
				Match(Mut);
				}
			}

			State = 422;
			variableIdentifier();
			State = 423;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(KoralParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(KoralParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public MethodListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodListContext methodList() {
		MethodListContext _localctx = new MethodListContext(Context, State);
		EnterRule(_localctx, 32, RULE_methodList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			Match(LeftBrace);
			State = 429;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 426;
					Match(NewLine);
					}
					} 
				}
				State = 431;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			State = 447;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 435;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 432;
						Match(NewLine);
						}
						}
						State = 437;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 438;
					method();
					State = 442;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 439;
							Match(NewLine);
							}
							} 
						}
						State = 444;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
					}
					}
					} 
				}
				State = 449;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 450;
				Match(NewLine);
				}
				}
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 456;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(KoralParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTerminatorContext expressionWithTerminator() {
			return GetRuleContext<ExpressionWithTerminatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 34, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			variableIdentifier();
			State = 459;
			parameterList();
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & 9077567998918657L) != 0)) {
				{
				State = 460;
				type();
				}
			}

			State = 463;
			Match(Equal);
			State = 467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 464;
				Match(NewLine);
				}
				}
				State = 469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 470;
			expressionWithTerminator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VirtualMethodListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(KoralParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(KoralParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VirtualMethodContext[] virtualMethod() {
			return GetRuleContexts<VirtualMethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VirtualMethodContext virtualMethod(int i) {
			return GetRuleContext<VirtualMethodContext>(i);
		}
		public VirtualMethodListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtualMethodList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVirtualMethodList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VirtualMethodListContext virtualMethodList() {
		VirtualMethodListContext _localctx = new VirtualMethodListContext(Context, State);
		EnterRule(_localctx, 36, RULE_virtualMethodList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			Match(LeftBrace);
			State = 476;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 473;
					Match(NewLine);
					}
					} 
				}
				State = 478;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			State = 494;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 482;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 479;
						Match(NewLine);
						}
						}
						State = 484;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 485;
					virtualMethod();
					State = 489;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 486;
							Match(NewLine);
							}
							} 
						}
						State = 491;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
					}
					}
					} 
				}
				State = 496;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 497;
				Match(NewLine);
				}
				}
				State = 502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 503;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VirtualMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(KoralParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(KoralParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public VirtualMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtualMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVirtualMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VirtualMethodContext virtualMethod() {
		VirtualMethodContext _localctx = new VirtualMethodContext(Context, State);
		EnterRule(_localctx, 38, RULE_virtualMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			variableIdentifier();
			State = 506;
			parameterList();
			State = 507;
			type();
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Equal) {
				{
				State = 508;
				Match(Equal);
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 509;
					Match(NewLine);
					}
					}
					State = 514;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 515;
				expression(0);
				}
			}

			State = 518;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_statement);
		try {
			State = 526;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 520;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 521;
				functionDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 522;
				expressionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 523;
				breakStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 524;
				continueStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 525;
				returnStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakExpressionContext breakExpression() {
			return GetRuleContext<BreakExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueExpressionContext continueExpression() {
			return GetRuleContext<ContinueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnExpressionContext returnExpression() {
			return GetRuleContext<ReturnExpressionContext>(0);
		}
		public ExpressionOrControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOrControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOrControlContext expressionOrControl() {
		ExpressionOrControlContext _localctx = new ExpressionOrControlContext(Context, State);
		EnterRule(_localctx, 42, RULE_expressionOrControl);
		try {
			State = 532;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
			case LeftBrace:
			case LeftBrack:
			case If:
			case While:
			case True:
			case False:
			case FloatLiteral:
			case DecimalLiteral:
			case BinaryLiteral:
			case OctalLiteral:
			case HexLiteral:
			case RuneLiteral:
			case StringLiteral:
			case UpperIdentifier:
			case LowerIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 528;
				expression(0);
				}
				break;
			case Break:
				EnterOuterAlt(_localctx, 2);
				{
				State = 529;
				breakExpression();
				}
				break;
			case Continue:
				EnterOuterAlt(_localctx, 3);
				{
				State = 530;
				continueExpression();
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 4);
				{
				State = 531;
				returnExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(KoralParser.Break, 0); }
		public BreakExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakExpressionContext breakExpression() {
		BreakExpressionContext _localctx = new BreakExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_breakExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			Match(Break);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(KoralParser.Continue, 0); }
		public ContinueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueExpressionContext continueExpression() {
		ContinueExpressionContext _localctx = new ContinueExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_continueExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			Match(Continue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(KoralParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnExpressionContext returnExpression() {
		ReturnExpressionContext _localctx = new ReturnExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_returnExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			Match(Return);
			State = 540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 539;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BreakExpressionContext breakExpression() {
			return GetRuleContext<BreakExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(KoralParser.SemiColon, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			breakExpression();
			State = 543;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ContinueExpressionContext continueExpression() {
			return GetRuleContext<ContinueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(KoralParser.SemiColon, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			continueExpression();
			State = 546;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(KoralParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(KoralParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithBlockContext expressionWithBlock() {
			return GetRuleContext<ExpressionWithBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(KoralParser.NewLine, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_returnStatement);
		int _la;
		try {
			State = 557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 548;
				Match(Return);
				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 4495628251955221L) != 0)) {
					{
					State = 549;
					expression(0);
					}
				}

				State = 552;
				Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 553;
				Match(Return);
				State = 554;
				expressionWithBlock();
				State = 555;
				Match(NewLine);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(KoralParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithBlockContext expressionWithBlock() {
			return GetRuleContext<ExpressionWithBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(KoralParser.NewLine, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_expressionStatement);
		try {
			State = 565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 559;
				expression(0);
				State = 560;
				Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 562;
				expressionWithBlock();
				State = 563;
				Match(NewLine);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionWithTerminatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithBlockContext expressionWithBlock() {
			return GetRuleContext<ExpressionWithBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(KoralParser.NewLine, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(KoralParser.SemiColon, 0); }
		public ExpressionWithTerminatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionWithTerminator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionWithTerminator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionWithTerminatorContext expressionWithTerminator() {
		ExpressionWithTerminatorContext _localctx = new ExpressionWithTerminatorContext(Context, State);
		EnterRule(_localctx, 58, RULE_expressionWithTerminator);
		try {
			State = 573;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 567;
				expressionWithBlock();
				State = 568;
				Match(NewLine);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 570;
				expression(0);
				State = 571;
				Match(SemiColon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithBlockContext expressionWithBlock() {
			return GetRuleContext<ExpressionWithBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfThenExpressionContext ifThenExpression() {
			return GetRuleContext<IfThenExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfThenElseExpressionContext ifThenElseExpression() {
			return GetRuleContext<IfThenElseExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileThenExpressionContext whileThenExpression() {
			return GetRuleContext<WhileThenExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileThenElseExpressionContext whileThenElseExpression() {
			return GetRuleContext<WhileThenElseExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeOperatorContext multiplicativeOperator() {
			return GetRuleContext<MultiplicativeOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveOperatorContext additiveOperator() {
			return GetRuleContext<AdditiveOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorContext compareOperator() {
			return GetRuleContext<CompareOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicAndOperatorContext logicAndOperator() {
			return GetRuleContext<LogicAndOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicOrOperatorContext logicOrOperator() {
			return GetRuleContext<LogicOrOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessCallSuffixContext memberAccessCallSuffix() {
			return GetRuleContext<MemberAccessCallSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSuffixContext callSuffix() {
			return GetRuleContext<CallSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext memberAccess() {
			return GetRuleContext<MemberAccessContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 576;
				primaryExpression();
				}
				break;
			case 2:
				{
				State = 577;
				expressionWithBlock();
				}
				break;
			case 3:
				{
				State = 578;
				ifThenExpression();
				}
				break;
			case 4:
				{
				State = 579;
				ifThenElseExpression();
				}
				break;
			case 5:
				{
				State = 580;
				whileThenExpression();
				}
				break;
			case 6:
				{
				State = 581;
				whileThenElseExpression();
				}
				break;
			case 7:
				{
				State = 582;
				assignmentExpression();
				}
				break;
			case 8:
				{
				State = 583;
				lambdaExpression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 614;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 612;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 586;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 587;
						multiplicativeOperator();
						State = 588;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 590;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 591;
						additiveOperator();
						State = 592;
						expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 594;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 595;
						compareOperator();
						State = 596;
						expression(5);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 598;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 599;
						logicAndOperator();
						State = 600;
						expression(4);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 602;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 603;
						logicOrOperator();
						State = 604;
						expression(3);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 606;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 607;
						memberAccessCallSuffix();
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 608;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 609;
						callSuffix();
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 610;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 611;
						memberAccess();
						}
						break;
					}
					} 
				}
				State = 616;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionWithBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfThenExpressionWithBlockContext ifThenExpressionWithBlock() {
			return GetRuleContext<IfThenExpressionWithBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfThenElseExpressionWithBlockContext ifThenElseExpressionWithBlock() {
			return GetRuleContext<IfThenElseExpressionWithBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileThenExpressionWithBlockContext whileThenExpressionWithBlock() {
			return GetRuleContext<WhileThenExpressionWithBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileThenElseExpressionWithBlockContext whileThenElseExpressionWithBlock() {
			return GetRuleContext<WhileThenElseExpressionWithBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionWithBlockContext assignmentExpressionWithBlock() {
			return GetRuleContext<AssignmentExpressionWithBlockContext>(0);
		}
		public ExpressionWithBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionWithBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionWithBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionWithBlockContext expressionWithBlock() {
		ExpressionWithBlockContext _localctx = new ExpressionWithBlockContext(Context, State);
		EnterRule(_localctx, 62, RULE_expressionWithBlock);
		try {
			State = 623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 617;
				blockExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 618;
				ifThenExpressionWithBlock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 619;
				ifThenElseExpressionWithBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 620;
				whileThenExpressionWithBlock();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 621;
				whileThenElseExpressionWithBlock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 622;
				assignmentExpressionWithBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(KoralParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(KoralParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTerminatorContext expressionWithTerminator() {
			return GetRuleContext<ExpressionWithTerminatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mut() { return GetToken(KoralParser.Mut, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			Match(Let);
			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mut) {
				{
				State = 626;
				Match(Mut);
				}
			}

			State = 629;
			variableIdentifier();
			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & 9077567998918657L) != 0)) {
				{
				State = 630;
				type();
				}
			}

			State = 633;
			Match(Equal);
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 634;
				Match(NewLine);
				}
				}
				State = 639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 640;
			expressionWithTerminator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(KoralParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(KoralParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithTerminatorContext expressionWithTerminator() {
			return GetRuleContext<ExpressionWithTerminatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			Match(Let);
			State = 643;
			variableIdentifier();
			State = 644;
			parameterList();
			State = 646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & 9077567998918657L) != 0)) {
				{
				State = 645;
				type();
				}
			}

			State = 648;
			Match(Equal);
			State = 652;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 649;
				Match(NewLine);
				}
				}
				State = 654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 655;
			expressionWithTerminator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessCallSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(KoralParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(KoralParser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(KoralParser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(KoralParser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(KoralParser.RightParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(KoralParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(KoralParser.Comma, i);
		}
		public MemberAccessCallSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccessCallSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessCallSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessCallSuffixContext memberAccessCallSuffix() {
		MemberAccessCallSuffixContext _localctx = new MemberAccessCallSuffixContext(Context, State);
		EnterRule(_localctx, 68, RULE_memberAccessCallSuffix);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NewLine) {
				{
				State = 657;
				Match(NewLine);
				}
			}

			State = 660;
			Match(Dot);
			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 661;
				Match(LeftParen);
				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 662;
					Match(NewLine);
					}
					}
					State = 667;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 668;
				type();
				State = 679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 669;
					Match(Comma);
					State = 673;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 670;
						Match(NewLine);
						}
						}
						State = 675;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 676;
					type();
					}
					}
					State = 681;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 682;
					Match(NewLine);
					}
					}
					State = 687;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 688;
				Match(RightParen);
				}
			}

			State = 692;
			variableIdentifier();
			State = 693;
			Match(LeftParen);
			State = 697;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 694;
					Match(NewLine);
					}
					} 
				}
				State = 699;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			}
			State = 714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 4495628251955221L) != 0)) {
				{
				State = 700;
				expression(0);
				State = 711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 701;
					Match(Comma);
					State = 705;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 702;
						Match(NewLine);
						}
						}
						State = 707;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 708;
					expression(0);
					}
					}
					State = 713;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 716;
				Match(NewLine);
				}
				}
				State = 721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 722;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(KoralParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(KoralParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(KoralParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(KoralParser.Comma, i);
		}
		public CallSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallSuffixContext callSuffix() {
		CallSuffixContext _localctx = new CallSuffixContext(Context, State);
		EnterRule(_localctx, 70, RULE_callSuffix);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			Match(LeftParen);
			State = 728;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 725;
					Match(NewLine);
					}
					} 
				}
				State = 730;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			}
			State = 745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 4495628251955221L) != 0)) {
				{
				State = 731;
				expression(0);
				State = 742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 732;
					Match(Comma);
					State = 736;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 733;
						Match(NewLine);
						}
						}
						State = 738;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 739;
					expression(0);
					}
					}
					State = 744;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 747;
				Match(NewLine);
				}
				}
				State = 752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 753;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(KoralParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(KoralParser.NewLine, 0); }
		public MemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessContext memberAccess() {
		MemberAccessContext _localctx = new MemberAccessContext(Context, State);
		EnterRule(_localctx, 72, RULE_memberAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NewLine) {
				{
				State = 755;
				Match(NewLine);
				}
			}

			State = 758;
			Match(Dot);
			State = 759;
			variableIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(KoralParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			variableIdentifier();
			State = 762;
			Match(Equal);
			State = 766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 763;
				Match(NewLine);
				}
				}
				State = 768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 769;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionWithBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(KoralParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithBlockContext expressionWithBlock() {
			return GetRuleContext<ExpressionWithBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public AssignmentExpressionWithBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpressionWithBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpressionWithBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionWithBlockContext assignmentExpressionWithBlock() {
		AssignmentExpressionWithBlockContext _localctx = new AssignmentExpressionWithBlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_assignmentExpressionWithBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			variableIdentifier();
			State = 772;
			Match(Equal);
			State = 776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 773;
				Match(NewLine);
				}
				}
				State = 778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 779;
			expressionWithBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(KoralParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_lambdaExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			parameterList();
			State = 783;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & 9077567998918657L) != 0)) {
				{
				State = 782;
				type();
				}
			}

			State = 785;
			Match(Arrow);
			State = 789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 786;
				Match(NewLine);
				}
				}
				State = 791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 792;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(KoralParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(KoralParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(KoralParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrControlContext expressionOrControl() {
			return GetRuleContext<ExpressionOrControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public IfThenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenExpressionContext ifThenExpression() {
		IfThenExpressionContext _localctx = new IfThenExpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_ifThenExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			Match(If);
			State = 798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 795;
				Match(NewLine);
				}
				}
				State = 800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 801;
			Match(LeftParen);
			State = 802;
			condition(0);
			State = 803;
			Match(RightParen);
			State = 807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 804;
				Match(NewLine);
				}
				}
				State = 809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 810;
			expressionOrControl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenExpressionWithBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(KoralParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(KoralParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(KoralParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithBlockContext expressionWithBlock() {
			return GetRuleContext<ExpressionWithBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public IfThenExpressionWithBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenExpressionWithBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenExpressionWithBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenExpressionWithBlockContext ifThenExpressionWithBlock() {
		IfThenExpressionWithBlockContext _localctx = new IfThenExpressionWithBlockContext(Context, State);
		EnterRule(_localctx, 82, RULE_ifThenExpressionWithBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812;
			Match(If);
			State = 816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 813;
				Match(NewLine);
				}
				}
				State = 818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 819;
			Match(LeftParen);
			State = 820;
			condition(0);
			State = 821;
			Match(RightParen);
			State = 825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 822;
				Match(NewLine);
				}
				}
				State = 827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 828;
			expressionWithBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(KoralParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(KoralParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(KoralParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(KoralParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public IfThenElseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseExpressionContext ifThenElseExpression() {
		IfThenElseExpressionContext _localctx = new IfThenElseExpressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_ifThenElseExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830;
			Match(If);
			State = 834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 831;
				Match(NewLine);
				}
				}
				State = 836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 837;
			Match(LeftParen);
			State = 838;
			condition(0);
			State = 839;
			Match(RightParen);
			State = 843;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 840;
				Match(NewLine);
				}
				}
				State = 845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 846;
			expression(0);
			State = 847;
			Match(Else);
			State = 851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 848;
				Match(NewLine);
				}
				}
				State = 853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 854;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseExpressionWithBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(KoralParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(KoralParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(KoralParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(KoralParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithBlockContext expressionWithBlock() {
			return GetRuleContext<ExpressionWithBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public IfThenElseExpressionWithBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseExpressionWithBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseExpressionWithBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseExpressionWithBlockContext ifThenElseExpressionWithBlock() {
		IfThenElseExpressionWithBlockContext _localctx = new IfThenElseExpressionWithBlockContext(Context, State);
		EnterRule(_localctx, 86, RULE_ifThenElseExpressionWithBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			Match(If);
			State = 860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 857;
				Match(NewLine);
				}
				}
				State = 862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 863;
			Match(LeftParen);
			State = 864;
			condition(0);
			State = 865;
			Match(RightParen);
			State = 869;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 866;
				Match(NewLine);
				}
				}
				State = 871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 872;
			expression(0);
			State = 873;
			Match(Else);
			State = 877;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 874;
				Match(NewLine);
				}
				}
				State = 879;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 880;
			expressionWithBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileThenExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(KoralParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(KoralParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(KoralParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrControlContext expressionOrControl() {
			return GetRuleContext<ExpressionOrControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public WhileThenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileThenExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileThenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileThenExpressionContext whileThenExpression() {
		WhileThenExpressionContext _localctx = new WhileThenExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_whileThenExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 882;
			Match(While);
			State = 886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 883;
				Match(NewLine);
				}
				}
				State = 888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 889;
			Match(LeftParen);
			State = 890;
			condition(0);
			State = 891;
			Match(RightParen);
			State = 895;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 892;
				Match(NewLine);
				}
				}
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 898;
			expressionOrControl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileThenExpressionWithBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(KoralParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(KoralParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(KoralParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithBlockContext expressionWithBlock() {
			return GetRuleContext<ExpressionWithBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public WhileThenExpressionWithBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileThenExpressionWithBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileThenExpressionWithBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileThenExpressionWithBlockContext whileThenExpressionWithBlock() {
		WhileThenExpressionWithBlockContext _localctx = new WhileThenExpressionWithBlockContext(Context, State);
		EnterRule(_localctx, 90, RULE_whileThenExpressionWithBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 900;
			Match(While);
			State = 904;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 901;
				Match(NewLine);
				}
				}
				State = 906;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 907;
			Match(LeftParen);
			State = 908;
			condition(0);
			State = 909;
			Match(RightParen);
			State = 913;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 910;
				Match(NewLine);
				}
				}
				State = 915;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 916;
			expressionWithBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileThenElseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(KoralParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(KoralParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(KoralParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(KoralParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public WhileThenElseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileThenElseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileThenElseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileThenElseExpressionContext whileThenElseExpression() {
		WhileThenElseExpressionContext _localctx = new WhileThenElseExpressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_whileThenElseExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			Match(While);
			State = 922;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 919;
				Match(NewLine);
				}
				}
				State = 924;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 925;
			Match(LeftParen);
			State = 926;
			condition(0);
			State = 927;
			Match(RightParen);
			State = 931;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 928;
				Match(NewLine);
				}
				}
				State = 933;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 934;
			expression(0);
			State = 935;
			Match(Else);
			State = 939;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 936;
				Match(NewLine);
				}
				}
				State = 941;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 942;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileThenElseExpressionWithBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(KoralParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(KoralParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(KoralParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(KoralParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionWithBlockContext expressionWithBlock() {
			return GetRuleContext<ExpressionWithBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		public WhileThenElseExpressionWithBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileThenElseExpressionWithBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileThenElseExpressionWithBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileThenElseExpressionWithBlockContext whileThenElseExpressionWithBlock() {
		WhileThenElseExpressionWithBlockContext _localctx = new WhileThenElseExpressionWithBlockContext(Context, State);
		EnterRule(_localctx, 94, RULE_whileThenElseExpressionWithBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944;
			Match(While);
			State = 948;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 945;
				Match(NewLine);
				}
				}
				State = 950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 951;
			Match(LeftParen);
			State = 952;
			condition(0);
			State = 953;
			Match(RightParen);
			State = 957;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 954;
				Match(NewLine);
				}
				}
				State = 959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 960;
			expression(0);
			State = 961;
			Match(Else);
			State = 965;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 962;
				Match(NewLine);
				}
				}
				State = 967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 968;
			expressionWithBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BackArrow() { return GetToken(KoralParser.BackArrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(KoralParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(KoralParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(KoralParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(KoralParser.Or, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		return condition(0);
	}

	private ConditionContext condition(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionContext _localctx = new ConditionContext(Context, _parentState);
		ConditionContext _prevctx = _localctx;
		int _startState = 96;
		EnterRecursionRule(_localctx, 96, RULE_condition, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1004;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				{
				State = 985;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
				case 1:
					{
					State = 971;
					pattern();
					State = 975;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 972;
						Match(NewLine);
						}
						}
						State = 977;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 978;
					Match(BackArrow);
					State = 982;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 979;
						Match(NewLine);
						}
						}
						State = 984;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 987;
				expression(0);
				}
				break;
			case 2:
				{
				State = 988;
				Match(LeftParen);
				State = 992;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 989;
					Match(NewLine);
					}
					}
					State = 994;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 995;
				condition(0);
				State = 999;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 996;
					Match(NewLine);
					}
					}
					State = 1001;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1002;
				Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1014;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1012;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
					case 1:
						{
						_localctx = new ConditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_condition);
						State = 1006;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1007;
						Match(And);
						State = 1008;
						condition(4);
						}
						break;
					case 2:
						{
						_localctx = new ConditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_condition);
						State = 1009;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1010;
						Match(Or);
						State = 1011;
						condition(3);
						}
						break;
					}
					} 
				}
				State = 1016;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BlockExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(KoralParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(KoralParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockExpressionContext blockExpression() {
		BlockExpressionContext _localctx = new BlockExpressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_blockExpression);
		int _la;
		try {
			int _alt;
			State = 1077;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1017;
				Match(LeftBrace);
				State = 1021;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1018;
						Match(NewLine);
						}
						} 
					}
					State = 1023;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
				}
				State = 1033;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1027;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NewLine) {
							{
							{
							State = 1024;
							Match(NewLine);
							}
							}
							State = 1029;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1030;
						statement();
						}
						} 
					}
					State = 1035;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,125,Context);
				}
				State = 1039;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 1036;
					Match(NewLine);
					}
					}
					State = 1041;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1042;
				expression(0);
				State = 1046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 1043;
					Match(NewLine);
					}
					}
					State = 1048;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1049;
				Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1051;
				Match(LeftBrace);
				State = 1055;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1052;
						Match(NewLine);
						}
						} 
					}
					State = 1057;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
				}
				State = 1067;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1061;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NewLine) {
							{
							{
							State = 1058;
							Match(NewLine);
							}
							}
							State = 1063;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1064;
						statement();
						}
						} 
					}
					State = 1069;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
				}
				State = 1073;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 1070;
					Match(NewLine);
					}
					}
					State = 1075;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1076;
				Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypePatternContext typePattern() {
			return GetRuleContext<TypePatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralPatternContext literalPattern() {
			return GetRuleContext<LiteralPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierPatternContext identifierPattern() {
			return GetRuleContext<IdentifierPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeconstructPatternContext deconstructPattern() {
			return GetRuleContext<DeconstructPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WildcardPatternContext wildcardPattern() {
			return GetRuleContext<WildcardPatternContext>(0);
		}
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 100, RULE_pattern);
		try {
			State = 1084;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1079;
				typePattern();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1080;
				literalPattern();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1081;
				identifierPattern();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1082;
				deconstructPattern();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1083;
				wildcardPattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierPatternContext identifierPattern() {
			return GetRuleContext<IdentifierPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WildcardPatternContext wildcardPattern() {
			return GetRuleContext<WildcardPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeconstructPatternContext deconstructPattern() {
			return GetRuleContext<DeconstructPatternContext>(0);
		}
		public TypePatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypePattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypePatternContext typePattern() {
		TypePatternContext _localctx = new TypePatternContext(Context, State);
		EnterRule(_localctx, 102, RULE_typePattern);
		try {
			State = 1095;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LowerIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1086;
				identifierPattern();
				State = 1087;
				type();
				}
				break;
			case Discard:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1089;
				wildcardPattern();
				State = 1090;
				type();
				}
				break;
			case LeftBrack:
			case UpperIdentifier:
			case Fn:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1092;
				type();
				State = 1093;
				deconstructPattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeconstructPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(KoralParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(KoralParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(KoralParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(KoralParser.Comma, i);
		}
		public DeconstructPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deconstructPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeconstructPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeconstructPatternContext deconstructPattern() {
		DeconstructPatternContext _localctx = new DeconstructPatternContext(Context, State);
		EnterRule(_localctx, 104, RULE_deconstructPattern);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1097;
			Match(LeftParen);
			State = 1101;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1098;
					Match(NewLine);
					}
					} 
				}
				State = 1103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			}
			State = 1118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 153114415871295505L) != 0)) {
				{
				State = 1104;
				pattern();
				State = 1115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1105;
					Match(Comma);
					State = 1109;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 1106;
						Match(NewLine);
						}
						}
						State = 1111;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1112;
					pattern();
					}
					}
					State = 1117;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 1120;
				Match(NewLine);
				}
				}
				State = 1125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1126;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		public IdentifierPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierPatternContext identifierPattern() {
		IdentifierPatternContext _localctx = new IdentifierPatternContext(Context, State);
		EnterRule(_localctx, 106, RULE_identifierPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1128;
			variableIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Discard() { return GetToken(KoralParser.Discard, 0); }
		public WildcardPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcardPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcardPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardPatternContext wildcardPattern() {
		WildcardPatternContext _localctx = new WildcardPatternContext(Context, State);
		EnterRule(_localctx, 108, RULE_wildcardPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1130;
			Match(Discard);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		public LiteralPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralPatternContext literalPattern() {
		LiteralPatternContext _localctx = new LiteralPatternContext(Context, State);
		EnterRule(_localctx, 110, RULE_literalPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1132;
			literalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructExpressionContext constructExpression() {
			return GetRuleContext<ConstructExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallExpressionContext functionCallExpression() {
			return GetRuleContext<FunctionCallExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_primaryExpression);
		try {
			State = 1138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1134;
				literalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1135;
				constructExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1136;
				functionCallExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1137;
				variableIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(KoralParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(KoralParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrack() { return GetToken(KoralParser.LeftBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrack() { return GetToken(KoralParser.RightBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(KoralParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(KoralParser.Comma, i);
		}
		public ConstructExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructExpressionContext constructExpression() {
		ConstructExpressionContext _localctx = new ConstructExpressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_constructExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBrack) {
				{
				State = 1140;
				Match(LeftBrack);
				State = 1144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 1141;
					Match(NewLine);
					}
					}
					State = 1146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1147;
				type();
				State = 1158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1148;
					Match(Comma);
					State = 1152;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 1149;
						Match(NewLine);
						}
						}
						State = 1154;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1155;
					type();
					}
					}
					State = 1160;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 1161;
					Match(NewLine);
					}
					}
					State = 1166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1167;
				Match(RightBrack);
				}
			}

			State = 1171;
			typeIdentifier();
			State = 1172;
			Match(LeftParen);
			State = 1176;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1173;
					Match(NewLine);
					}
					} 
				}
				State = 1178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
			}
			State = 1193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 4495628251955221L) != 0)) {
				{
				State = 1179;
				expression(0);
				State = 1190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1180;
					Match(Comma);
					State = 1184;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 1181;
						Match(NewLine);
						}
						}
						State = 1186;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1187;
					expression(0);
					}
					}
					State = 1192;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 1195;
				Match(NewLine);
				}
				}
				State = 1200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1201;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(KoralParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(KoralParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrack() { return GetToken(KoralParser.LeftBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrack() { return GetToken(KoralParser.RightBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(KoralParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(KoralParser.Comma, i);
		}
		public FunctionCallExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallExpressionContext functionCallExpression() {
		FunctionCallExpressionContext _localctx = new FunctionCallExpressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_functionCallExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBrack) {
				{
				State = 1203;
				Match(LeftBrack);
				State = 1207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 1204;
					Match(NewLine);
					}
					}
					State = 1209;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1210;
				type();
				State = 1221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1211;
					Match(Comma);
					State = 1215;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 1212;
						Match(NewLine);
						}
						}
						State = 1217;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1218;
					type();
					}
					}
					State = 1223;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NewLine) {
					{
					{
					State = 1224;
					Match(NewLine);
					}
					}
					State = 1229;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1230;
				Match(RightBrack);
				}
			}

			State = 1234;
			variableIdentifier();
			State = 1235;
			Match(LeftParen);
			State = 1239;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1236;
					Match(NewLine);
					}
					} 
				}
				State = 1241;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			}
			State = 1256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 4495628251955221L) != 0)) {
				{
				State = 1242;
				expression(0);
				State = 1253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1243;
					Match(Comma);
					State = 1247;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 1244;
						Match(NewLine);
						}
						}
						State = 1249;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1250;
					expression(0);
					}
					}
					State = 1255;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NewLine) {
				{
				{
				State = 1258;
				Match(NewLine);
				}
				}
				State = 1263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1264;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerExpressionContext integerExpression() {
			return GetRuleContext<IntegerExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatExpressionContext floatExpression() {
			return GetRuleContext<FloatExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuneExpressionContext runeExpression() {
			return GetRuleContext<RuneExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExpressionContext stringExpression() {
			return GetRuleContext<StringExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpressionContext boolExpression() {
			return GetRuleContext<BoolExpressionContext>(0);
		}
		public LiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExpressionContext literalExpression() {
		LiteralExpressionContext _localctx = new LiteralExpressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_literalExpression);
		try {
			State = 1271;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DecimalLiteral:
			case BinaryLiteral:
			case OctalLiteral:
			case HexLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1266;
				integerExpression();
				}
				break;
			case FloatLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1267;
				floatExpression();
				}
				break;
			case RuneLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1268;
				runeExpression();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1269;
				stringExpression();
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1270;
				boolExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrack() { return GetToken(KoralParser.LeftBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrack() { return GetToken(KoralParser.RightBrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(KoralParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(KoralParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(KoralParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(KoralParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_type);
		int _la;
		try {
			State = 1306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrack:
			case UpperIdentifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LeftBrack) {
					{
					State = 1273;
					Match(LeftBrack);
					State = 1277;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 1274;
						Match(NewLine);
						}
						}
						State = 1279;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1280;
					type();
					State = 1291;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 1281;
						Match(Comma);
						State = 1285;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NewLine) {
							{
							{
							State = 1282;
							Match(NewLine);
							}
							}
							State = 1287;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1288;
						type();
						}
						}
						State = 1293;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1297;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NewLine) {
						{
						{
						State = 1294;
						Match(NewLine);
						}
						}
						State = 1299;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1300;
					Match(RightBrack);
					}
				}

				State = 1304;
				typeIdentifier();
				}
				break;
			case Fn:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1305;
				functionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fn() { return GetToken(KoralParser.Fn, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_functionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1308;
			Match(Fn);
			State = 1309;
			parameterList();
			State = 1310;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UpperIdentifier() { return GetToken(KoralParser.UpperIdentifier, 0); }
		public TypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdentifierContext typeIdentifier() {
		TypeIdentifierContext _localctx = new TypeIdentifierContext(Context, State);
		EnterRule(_localctx, 124, RULE_typeIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1312;
			Match(UpperIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LowerIdentifier() { return GetToken(KoralParser.LowerIdentifier, 0); }
		public VariableIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableIdentifierContext variableIdentifier() {
		VariableIdentifierContext _localctx = new VariableIdentifierContext(Context, State);
		EnterRule(_localctx, 126, RULE_variableIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1314;
			Match(LowerIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(KoralParser.StringLiteral, 0); }
		public StringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExpressionContext stringExpression() {
		StringExpressionContext _localctx = new StringExpressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_stringExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1316;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuneExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RuneLiteral() { return GetToken(KoralParser.RuneLiteral, 0); }
		public RuneExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuneExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuneExpressionContext runeExpression() {
		RuneExpressionContext _localctx = new RuneExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_runeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1318;
			Match(RuneLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatLiteral() { return GetToken(KoralParser.FloatLiteral, 0); }
		public FloatExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatExpressionContext floatExpression() {
		FloatExpressionContext _localctx = new FloatExpressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_floatExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320;
			Match(FloatLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(KoralParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(KoralParser.False, 0); }
		public BoolExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExpressionContext boolExpression() {
		BoolExpressionContext _localctx = new BoolExpressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_boolExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1322;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(KoralParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryLiteral() { return GetToken(KoralParser.BinaryLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalLiteral() { return GetToken(KoralParser.OctalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexLiteral() { return GetToken(KoralParser.HexLiteral, 0); }
		public IntegerExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerExpressionContext integerExpression() {
		IntegerExpressionContext _localctx = new IntegerExpressionContext(Context, State);
		EnterRule(_localctx, 136, RULE_integerExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1324;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4323455642275676160L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mul() { return GetToken(KoralParser.Mul, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(KoralParser.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(KoralParser.Mod, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(KoralParser.NewLine, 0); }
		public MultiplicativeOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeOperatorContext multiplicativeOperator() {
		MultiplicativeOperatorContext _localctx = new MultiplicativeOperatorContext(Context, State);
		EnterRule(_localctx, 138, RULE_multiplicativeOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1326;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 939524096L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NewLine) {
				{
				State = 1327;
				Match(NewLine);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(KoralParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sub() { return GetToken(KoralParser.Sub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(KoralParser.NewLine, 0); }
		public AdditiveOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveOperatorContext additiveOperator() {
		AdditiveOperatorContext _localctx = new AdditiveOperatorContext(Context, State);
		EnterRule(_localctx, 140, RULE_additiveOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1330;
			_la = TokenStream.LA(1);
			if ( !(_la==Add || _la==Sub) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NewLine) {
				{
				State = 1331;
				Match(NewLine);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicAndOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(KoralParser.BitAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(KoralParser.NewLine, 0); }
		public LogicAndOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicAndOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicAndOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicAndOperatorContext logicAndOperator() {
		LogicAndOperatorContext _localctx = new LogicAndOperatorContext(Context, State);
		EnterRule(_localctx, 142, RULE_logicAndOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1334;
			Match(BitAnd);
			State = 1336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NewLine) {
				{
				State = 1335;
				Match(NewLine);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicOrOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(KoralParser.BitOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(KoralParser.NewLine, 0); }
		public LogicOrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicOrOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicOrOperatorContext logicOrOperator() {
		LogicOrOperatorContext _localctx = new LogicOrOperatorContext(Context, State);
		EnterRule(_localctx, 144, RULE_logicOrOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1338;
			Match(BitOr);
			State = 1340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NewLine) {
				{
				State = 1339;
				Match(NewLine);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(KoralParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(KoralParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual() { return GetToken(KoralParser.LessEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(KoralParser.GreaterEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EqualEqual() { return GetToken(KoralParser.EqualEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(KoralParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(KoralParser.NewLine, 0); }
		public CompareOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoralParserVisitor<TResult> typedVisitor = visitor as IKoralParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorContext compareOperator() {
		CompareOperatorContext _localctx = new CompareOperatorContext(Context, State);
		EnterRule(_localctx, 146, RULE_compareOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1342;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3192L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NewLine) {
				{
				State = 1343;
				Match(NewLine);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 30: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 48: return condition_sempred((ConditionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 7);
		}
		return true;
	}
	private bool condition_sempred(ConditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,71,1347,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,1,0,1,0,5,0,151,8,0,10,0,12,0,154,9,0,1,
		0,5,0,157,8,0,10,0,12,0,160,9,0,1,0,1,0,5,0,164,8,0,10,0,12,0,167,9,0,
		5,0,169,8,0,10,0,12,0,172,9,0,1,0,5,0,175,8,0,10,0,12,0,178,9,0,1,0,1,
		0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,192,8,2,1,3,1,3,3,3,196,
		8,3,1,3,1,3,3,3,200,8,3,1,3,1,3,5,3,204,8,3,10,3,12,3,207,9,3,1,3,1,3,
		1,4,1,4,3,4,213,8,4,1,4,1,4,1,4,3,4,218,8,4,1,4,1,4,5,4,222,8,4,10,4,12,
		4,225,9,4,1,4,1,4,1,5,1,5,3,5,231,8,5,1,5,3,5,234,8,5,1,5,1,5,1,5,1,5,
		3,5,240,8,5,1,5,1,5,1,5,3,5,245,8,5,1,6,1,6,3,6,249,8,6,1,6,1,6,1,6,1,
		6,5,6,255,8,6,10,6,12,6,258,9,6,1,6,3,6,261,8,6,1,7,1,7,3,7,265,8,7,1,
		7,1,7,1,7,3,7,270,8,7,1,7,1,7,1,7,3,7,275,8,7,1,8,1,8,3,8,279,8,8,1,8,
		1,8,1,8,5,8,284,8,8,10,8,12,8,287,9,8,1,8,1,8,5,8,291,8,8,10,8,12,8,294,
		9,8,1,8,1,8,1,8,5,8,299,8,8,10,8,12,8,302,9,8,1,8,5,8,305,8,8,10,8,12,
		8,308,9,8,1,8,5,8,311,8,8,10,8,12,8,314,9,8,1,8,1,8,3,8,318,8,8,1,9,1,
		9,1,9,1,10,1,10,5,10,325,8,10,10,10,12,10,328,9,10,1,10,1,10,1,10,5,10,
		333,8,10,10,10,12,10,336,9,10,1,10,5,10,339,8,10,10,10,12,10,342,9,10,
		1,10,5,10,345,8,10,10,10,12,10,348,9,10,1,10,1,10,1,11,1,11,1,11,1,12,
		1,12,5,12,357,8,12,10,12,12,12,360,9,12,1,12,1,12,1,12,5,12,365,8,12,10,
		12,12,12,368,9,12,1,12,5,12,371,8,12,10,12,12,12,374,9,12,3,12,376,8,12,
		1,12,5,12,379,8,12,10,12,12,12,382,9,12,1,12,1,12,1,13,1,13,1,13,1,14,
		1,14,5,14,391,8,14,10,14,12,14,394,9,14,1,14,1,14,1,14,5,14,399,8,14,10,
		14,12,14,402,9,14,1,14,5,14,405,8,14,10,14,12,14,408,9,14,3,14,410,8,14,
		1,14,5,14,413,8,14,10,14,12,14,416,9,14,1,14,1,14,1,15,3,15,421,8,15,1,
		15,1,15,1,15,1,16,1,16,5,16,428,8,16,10,16,12,16,431,9,16,1,16,5,16,434,
		8,16,10,16,12,16,437,9,16,1,16,1,16,5,16,441,8,16,10,16,12,16,444,9,16,
		5,16,446,8,16,10,16,12,16,449,9,16,1,16,5,16,452,8,16,10,16,12,16,455,
		9,16,1,16,1,16,1,17,1,17,1,17,3,17,462,8,17,1,17,1,17,5,17,466,8,17,10,
		17,12,17,469,9,17,1,17,1,17,1,18,1,18,5,18,475,8,18,10,18,12,18,478,9,
		18,1,18,5,18,481,8,18,10,18,12,18,484,9,18,1,18,1,18,5,18,488,8,18,10,
		18,12,18,491,9,18,5,18,493,8,18,10,18,12,18,496,9,18,1,18,5,18,499,8,18,
		10,18,12,18,502,9,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,5,19,511,8,19,
		10,19,12,19,514,9,19,1,19,3,19,517,8,19,1,19,1,19,1,20,1,20,1,20,1,20,
		1,20,1,20,3,20,527,8,20,1,21,1,21,1,21,1,21,3,21,533,8,21,1,22,1,22,1,
		23,1,23,1,24,1,24,3,24,541,8,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,
		3,27,551,8,27,1,27,1,27,1,27,1,27,1,27,3,27,558,8,27,1,28,1,28,1,28,1,
		28,1,28,1,28,3,28,566,8,28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,574,8,29,
		1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,585,8,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,613,8,30,10,30,12,
		30,616,9,30,1,31,1,31,1,31,1,31,1,31,1,31,3,31,624,8,31,1,32,1,32,3,32,
		628,8,32,1,32,1,32,3,32,632,8,32,1,32,1,32,5,32,636,8,32,10,32,12,32,639,
		9,32,1,32,1,32,1,33,1,33,1,33,1,33,3,33,647,8,33,1,33,1,33,5,33,651,8,
		33,10,33,12,33,654,9,33,1,33,1,33,1,34,3,34,659,8,34,1,34,1,34,1,34,5,
		34,664,8,34,10,34,12,34,667,9,34,1,34,1,34,1,34,5,34,672,8,34,10,34,12,
		34,675,9,34,1,34,5,34,678,8,34,10,34,12,34,681,9,34,1,34,5,34,684,8,34,
		10,34,12,34,687,9,34,1,34,1,34,3,34,691,8,34,1,34,1,34,1,34,5,34,696,8,
		34,10,34,12,34,699,9,34,1,34,1,34,1,34,5,34,704,8,34,10,34,12,34,707,9,
		34,1,34,5,34,710,8,34,10,34,12,34,713,9,34,3,34,715,8,34,1,34,5,34,718,
		8,34,10,34,12,34,721,9,34,1,34,1,34,1,35,1,35,5,35,727,8,35,10,35,12,35,
		730,9,35,1,35,1,35,1,35,5,35,735,8,35,10,35,12,35,738,9,35,1,35,5,35,741,
		8,35,10,35,12,35,744,9,35,3,35,746,8,35,1,35,5,35,749,8,35,10,35,12,35,
		752,9,35,1,35,1,35,1,36,3,36,757,8,36,1,36,1,36,1,36,1,37,1,37,1,37,5,
		37,765,8,37,10,37,12,37,768,9,37,1,37,1,37,1,38,1,38,1,38,5,38,775,8,38,
		10,38,12,38,778,9,38,1,38,1,38,1,39,1,39,3,39,784,8,39,1,39,1,39,5,39,
		788,8,39,10,39,12,39,791,9,39,1,39,1,39,1,40,1,40,5,40,797,8,40,10,40,
		12,40,800,9,40,1,40,1,40,1,40,1,40,5,40,806,8,40,10,40,12,40,809,9,40,
		1,40,1,40,1,41,1,41,5,41,815,8,41,10,41,12,41,818,9,41,1,41,1,41,1,41,
		1,41,5,41,824,8,41,10,41,12,41,827,9,41,1,41,1,41,1,42,1,42,5,42,833,8,
		42,10,42,12,42,836,9,42,1,42,1,42,1,42,1,42,5,42,842,8,42,10,42,12,42,
		845,9,42,1,42,1,42,1,42,5,42,850,8,42,10,42,12,42,853,9,42,1,42,1,42,1,
		43,1,43,5,43,859,8,43,10,43,12,43,862,9,43,1,43,1,43,1,43,1,43,5,43,868,
		8,43,10,43,12,43,871,9,43,1,43,1,43,1,43,5,43,876,8,43,10,43,12,43,879,
		9,43,1,43,1,43,1,44,1,44,5,44,885,8,44,10,44,12,44,888,9,44,1,44,1,44,
		1,44,1,44,5,44,894,8,44,10,44,12,44,897,9,44,1,44,1,44,1,45,1,45,5,45,
		903,8,45,10,45,12,45,906,9,45,1,45,1,45,1,45,1,45,5,45,912,8,45,10,45,
		12,45,915,9,45,1,45,1,45,1,46,1,46,5,46,921,8,46,10,46,12,46,924,9,46,
		1,46,1,46,1,46,1,46,5,46,930,8,46,10,46,12,46,933,9,46,1,46,1,46,1,46,
		5,46,938,8,46,10,46,12,46,941,9,46,1,46,1,46,1,47,1,47,5,47,947,8,47,10,
		47,12,47,950,9,47,1,47,1,47,1,47,1,47,5,47,956,8,47,10,47,12,47,959,9,
		47,1,47,1,47,1,47,5,47,964,8,47,10,47,12,47,967,9,47,1,47,1,47,1,48,1,
		48,1,48,5,48,974,8,48,10,48,12,48,977,9,48,1,48,1,48,5,48,981,8,48,10,
		48,12,48,984,9,48,3,48,986,8,48,1,48,1,48,1,48,5,48,991,8,48,10,48,12,
		48,994,9,48,1,48,1,48,5,48,998,8,48,10,48,12,48,1001,9,48,1,48,1,48,3,
		48,1005,8,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,1013,8,48,10,48,12,48,
		1016,9,48,1,49,1,49,5,49,1020,8,49,10,49,12,49,1023,9,49,1,49,5,49,1026,
		8,49,10,49,12,49,1029,9,49,1,49,5,49,1032,8,49,10,49,12,49,1035,9,49,1,
		49,5,49,1038,8,49,10,49,12,49,1041,9,49,1,49,1,49,5,49,1045,8,49,10,49,
		12,49,1048,9,49,1,49,1,49,1,49,1,49,5,49,1054,8,49,10,49,12,49,1057,9,
		49,1,49,5,49,1060,8,49,10,49,12,49,1063,9,49,1,49,5,49,1066,8,49,10,49,
		12,49,1069,9,49,1,49,5,49,1072,8,49,10,49,12,49,1075,9,49,1,49,3,49,1078,
		8,49,1,50,1,50,1,50,1,50,1,50,3,50,1085,8,50,1,51,1,51,1,51,1,51,1,51,
		1,51,1,51,1,51,1,51,3,51,1096,8,51,1,52,1,52,5,52,1100,8,52,10,52,12,52,
		1103,9,52,1,52,1,52,1,52,5,52,1108,8,52,10,52,12,52,1111,9,52,1,52,5,52,
		1114,8,52,10,52,12,52,1117,9,52,3,52,1119,8,52,1,52,5,52,1122,8,52,10,
		52,12,52,1125,9,52,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,
		56,1,56,3,56,1139,8,56,1,57,1,57,5,57,1143,8,57,10,57,12,57,1146,9,57,
		1,57,1,57,1,57,5,57,1151,8,57,10,57,12,57,1154,9,57,1,57,5,57,1157,8,57,
		10,57,12,57,1160,9,57,1,57,5,57,1163,8,57,10,57,12,57,1166,9,57,1,57,1,
		57,3,57,1170,8,57,1,57,1,57,1,57,5,57,1175,8,57,10,57,12,57,1178,9,57,
		1,57,1,57,1,57,5,57,1183,8,57,10,57,12,57,1186,9,57,1,57,5,57,1189,8,57,
		10,57,12,57,1192,9,57,3,57,1194,8,57,1,57,5,57,1197,8,57,10,57,12,57,1200,
		9,57,1,57,1,57,1,58,1,58,5,58,1206,8,58,10,58,12,58,1209,9,58,1,58,1,58,
		1,58,5,58,1214,8,58,10,58,12,58,1217,9,58,1,58,5,58,1220,8,58,10,58,12,
		58,1223,9,58,1,58,5,58,1226,8,58,10,58,12,58,1229,9,58,1,58,1,58,3,58,
		1233,8,58,1,58,1,58,1,58,5,58,1238,8,58,10,58,12,58,1241,9,58,1,58,1,58,
		1,58,5,58,1246,8,58,10,58,12,58,1249,9,58,1,58,5,58,1252,8,58,10,58,12,
		58,1255,9,58,3,58,1257,8,58,1,58,5,58,1260,8,58,10,58,12,58,1263,9,58,
		1,58,1,58,1,59,1,59,1,59,1,59,1,59,3,59,1272,8,59,1,60,1,60,5,60,1276,
		8,60,10,60,12,60,1279,9,60,1,60,1,60,1,60,5,60,1284,8,60,10,60,12,60,1287,
		9,60,1,60,5,60,1290,8,60,10,60,12,60,1293,9,60,1,60,5,60,1296,8,60,10,
		60,12,60,1299,9,60,1,60,1,60,3,60,1303,8,60,1,60,1,60,3,60,1307,8,60,1,
		61,1,61,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,
		67,1,67,1,68,1,68,1,69,1,69,3,69,1329,8,69,1,70,1,70,3,70,1333,8,70,1,
		71,1,71,3,71,1337,8,71,1,72,1,72,3,72,1341,8,72,1,73,1,73,3,73,1345,8,
		73,1,73,0,2,60,96,74,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
		84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
		124,126,128,130,132,134,136,138,140,142,144,146,0,5,1,0,52,53,1,0,58,61,
		1,0,27,29,1,0,25,26,2,0,3,6,10,11,1480,0,148,1,0,0,0,2,181,1,0,0,0,4,191,
		1,0,0,0,6,193,1,0,0,0,8,210,1,0,0,0,10,228,1,0,0,0,12,246,1,0,0,0,14,262,
		1,0,0,0,16,276,1,0,0,0,18,319,1,0,0,0,20,322,1,0,0,0,22,351,1,0,0,0,24,
		354,1,0,0,0,26,385,1,0,0,0,28,388,1,0,0,0,30,420,1,0,0,0,32,425,1,0,0,
		0,34,458,1,0,0,0,36,472,1,0,0,0,38,505,1,0,0,0,40,526,1,0,0,0,42,532,1,
		0,0,0,44,534,1,0,0,0,46,536,1,0,0,0,48,538,1,0,0,0,50,542,1,0,0,0,52,545,
		1,0,0,0,54,557,1,0,0,0,56,565,1,0,0,0,58,573,1,0,0,0,60,584,1,0,0,0,62,
		623,1,0,0,0,64,625,1,0,0,0,66,642,1,0,0,0,68,658,1,0,0,0,70,724,1,0,0,
		0,72,756,1,0,0,0,74,761,1,0,0,0,76,771,1,0,0,0,78,781,1,0,0,0,80,794,1,
		0,0,0,82,812,1,0,0,0,84,830,1,0,0,0,86,856,1,0,0,0,88,882,1,0,0,0,90,900,
		1,0,0,0,92,918,1,0,0,0,94,944,1,0,0,0,96,1004,1,0,0,0,98,1077,1,0,0,0,
		100,1084,1,0,0,0,102,1095,1,0,0,0,104,1097,1,0,0,0,106,1128,1,0,0,0,108,
		1130,1,0,0,0,110,1132,1,0,0,0,112,1138,1,0,0,0,114,1169,1,0,0,0,116,1232,
		1,0,0,0,118,1271,1,0,0,0,120,1306,1,0,0,0,122,1308,1,0,0,0,124,1312,1,
		0,0,0,126,1314,1,0,0,0,128,1316,1,0,0,0,130,1318,1,0,0,0,132,1320,1,0,
		0,0,134,1322,1,0,0,0,136,1324,1,0,0,0,138,1326,1,0,0,0,140,1330,1,0,0,
		0,142,1334,1,0,0,0,144,1338,1,0,0,0,146,1342,1,0,0,0,148,152,3,2,1,0,149,
		151,5,69,0,0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,1,
		0,0,0,153,170,1,0,0,0,154,152,1,0,0,0,155,157,5,69,0,0,156,155,1,0,0,0,
		157,160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,158,
		1,0,0,0,161,165,3,4,2,0,162,164,5,69,0,0,163,162,1,0,0,0,164,167,1,0,0,
		0,165,163,1,0,0,0,165,166,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,168,
		158,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,176,1,
		0,0,0,172,170,1,0,0,0,173,175,5,69,0,0,174,173,1,0,0,0,175,178,1,0,0,0,
		176,174,1,0,0,0,176,177,1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,180,
		5,0,0,1,180,1,1,0,0,0,181,182,5,37,0,0,182,183,3,126,63,0,183,184,5,12,
		0,0,184,3,1,0,0,0,185,192,3,6,3,0,186,192,3,8,4,0,187,192,3,10,5,0,188,
		192,3,16,8,0,189,192,3,12,6,0,190,192,3,14,7,0,191,185,1,0,0,0,191,186,
		1,0,0,0,191,187,1,0,0,0,191,188,1,0,0,0,191,189,1,0,0,0,191,190,1,0,0,
		0,192,5,1,0,0,0,193,195,5,36,0,0,194,196,5,35,0,0,195,194,1,0,0,0,195,
		196,1,0,0,0,196,197,1,0,0,0,197,199,3,126,63,0,198,200,3,120,60,0,199,
		198,1,0,0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,205,5,9,0,0,202,204,5,
		69,0,0,203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,
		206,208,1,0,0,0,207,205,1,0,0,0,208,209,3,58,29,0,209,7,1,0,0,0,210,212,
		5,36,0,0,211,213,3,20,10,0,212,211,1,0,0,0,212,213,1,0,0,0,213,214,1,0,
		0,0,214,215,3,126,63,0,215,217,3,24,12,0,216,218,3,120,60,0,217,216,1,
		0,0,0,217,218,1,0,0,0,218,219,1,0,0,0,219,223,5,9,0,0,220,222,5,69,0,0,
		221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,226,
		1,0,0,0,225,223,1,0,0,0,226,227,3,58,29,0,227,9,1,0,0,0,228,230,5,54,0,
		0,229,231,5,35,0,0,230,229,1,0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,
		234,3,20,10,0,233,232,1,0,0,0,233,234,1,0,0,0,234,235,1,0,0,0,235,236,
		3,124,62,0,236,239,3,28,14,0,237,238,5,48,0,0,238,240,3,120,60,0,239,237,
		1,0,0,0,239,240,1,0,0,0,240,244,1,0,0,0,241,245,5,12,0,0,242,243,5,55,
		0,0,243,245,3,32,16,0,244,241,1,0,0,0,244,242,1,0,0,0,245,11,1,0,0,0,246,
		248,5,54,0,0,247,249,3,20,10,0,248,247,1,0,0,0,248,249,1,0,0,0,249,250,
		1,0,0,0,250,260,3,124,62,0,251,261,5,12,0,0,252,256,5,9,0,0,253,255,5,
		69,0,0,254,253,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,
		257,259,1,0,0,0,258,256,1,0,0,0,259,261,3,36,18,0,260,251,1,0,0,0,260,
		252,1,0,0,0,261,13,1,0,0,0,262,264,5,56,0,0,263,265,3,20,10,0,264,263,
		1,0,0,0,264,265,1,0,0,0,265,266,1,0,0,0,266,269,3,124,62,0,267,268,5,48,
		0,0,268,270,3,120,60,0,269,267,1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,
		271,272,5,55,0,0,272,274,3,32,16,0,273,275,5,12,0,0,274,273,1,0,0,0,274,
		275,1,0,0,0,275,15,1,0,0,0,276,278,5,54,0,0,277,279,3,20,10,0,278,277,
		1,0,0,0,278,279,1,0,0,0,279,280,1,0,0,0,280,281,3,124,62,0,281,285,5,9,
		0,0,282,284,5,69,0,0,283,282,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,
		286,1,0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,292,5,16,0,0,289,291,5,
		69,0,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,
		293,295,1,0,0,0,294,292,1,0,0,0,295,306,3,18,9,0,296,300,5,8,0,0,297,299,
		5,69,0,0,298,297,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,
		0,301,303,1,0,0,0,302,300,1,0,0,0,303,305,3,18,9,0,304,296,1,0,0,0,305,
		308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,312,1,0,0,0,308,306,1,
		0,0,0,309,311,5,69,0,0,310,309,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,
		312,313,1,0,0,0,313,315,1,0,0,0,314,312,1,0,0,0,315,317,5,17,0,0,316,318,
		5,12,0,0,317,316,1,0,0,0,317,318,1,0,0,0,318,17,1,0,0,0,319,320,3,124,
		62,0,320,321,3,28,14,0,321,19,1,0,0,0,322,326,5,18,0,0,323,325,5,69,0,
		0,324,323,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,
		329,1,0,0,0,328,326,1,0,0,0,329,340,3,22,11,0,330,334,5,8,0,0,331,333,
		5,69,0,0,332,331,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,
		0,335,337,1,0,0,0,336,334,1,0,0,0,337,339,3,22,11,0,338,330,1,0,0,0,339,
		342,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,346,1,0,0,0,342,340,1,
		0,0,0,343,345,5,69,0,0,344,343,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,
		346,347,1,0,0,0,347,349,1,0,0,0,348,346,1,0,0,0,349,350,5,19,0,0,350,21,
		1,0,0,0,351,352,3,124,62,0,352,353,3,120,60,0,353,23,1,0,0,0,354,358,5,
		14,0,0,355,357,5,69,0,0,356,355,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,
		0,358,359,1,0,0,0,359,375,1,0,0,0,360,358,1,0,0,0,361,372,3,26,13,0,362,
		366,5,8,0,0,363,365,5,69,0,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,
		0,0,0,366,367,1,0,0,0,367,369,1,0,0,0,368,366,1,0,0,0,369,371,3,26,13,
		0,370,362,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,
		376,1,0,0,0,374,372,1,0,0,0,375,361,1,0,0,0,375,376,1,0,0,0,376,380,1,
		0,0,0,377,379,5,69,0,0,378,377,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,
		380,381,1,0,0,0,381,383,1,0,0,0,382,380,1,0,0,0,383,384,5,15,0,0,384,25,
		1,0,0,0,385,386,3,126,63,0,386,387,3,120,60,0,387,27,1,0,0,0,388,392,5,
		14,0,0,389,391,5,69,0,0,390,389,1,0,0,0,391,394,1,0,0,0,392,390,1,0,0,
		0,392,393,1,0,0,0,393,409,1,0,0,0,394,392,1,0,0,0,395,406,3,30,15,0,396,
		400,5,8,0,0,397,399,5,69,0,0,398,397,1,0,0,0,399,402,1,0,0,0,400,398,1,
		0,0,0,400,401,1,0,0,0,401,403,1,0,0,0,402,400,1,0,0,0,403,405,3,30,15,
		0,404,396,1,0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,
		410,1,0,0,0,408,406,1,0,0,0,409,395,1,0,0,0,409,410,1,0,0,0,410,414,1,
		0,0,0,411,413,5,69,0,0,412,411,1,0,0,0,413,416,1,0,0,0,414,412,1,0,0,0,
		414,415,1,0,0,0,415,417,1,0,0,0,416,414,1,0,0,0,417,418,5,15,0,0,418,29,
		1,0,0,0,419,421,5,35,0,0,420,419,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,
		0,422,423,3,126,63,0,423,424,3,120,60,0,424,31,1,0,0,0,425,429,5,16,0,
		0,426,428,5,69,0,0,427,426,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,429,
		430,1,0,0,0,430,447,1,0,0,0,431,429,1,0,0,0,432,434,5,69,0,0,433,432,1,
		0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,438,1,0,0,0,
		437,435,1,0,0,0,438,442,3,34,17,0,439,441,5,69,0,0,440,439,1,0,0,0,441,
		444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,446,1,0,0,0,444,442,1,
		0,0,0,445,435,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,
		448,453,1,0,0,0,449,447,1,0,0,0,450,452,5,69,0,0,451,450,1,0,0,0,452,455,
		1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,456,1,0,0,0,455,453,1,0,0,
		0,456,457,5,17,0,0,457,33,1,0,0,0,458,459,3,126,63,0,459,461,3,24,12,0,
		460,462,3,120,60,0,461,460,1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,
		467,5,9,0,0,464,466,5,69,0,0,465,464,1,0,0,0,466,469,1,0,0,0,467,465,1,
		0,0,0,467,468,1,0,0,0,468,470,1,0,0,0,469,467,1,0,0,0,470,471,3,58,29,
		0,471,35,1,0,0,0,472,476,5,16,0,0,473,475,5,69,0,0,474,473,1,0,0,0,475,
		478,1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,494,1,0,0,0,478,476,1,
		0,0,0,479,481,5,69,0,0,480,479,1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,
		482,483,1,0,0,0,483,485,1,0,0,0,484,482,1,0,0,0,485,489,3,38,19,0,486,
		488,5,69,0,0,487,486,1,0,0,0,488,491,1,0,0,0,489,487,1,0,0,0,489,490,1,
		0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,492,482,1,0,0,0,493,496,1,0,0,0,
		494,492,1,0,0,0,494,495,1,0,0,0,495,500,1,0,0,0,496,494,1,0,0,0,497,499,
		5,69,0,0,498,497,1,0,0,0,499,502,1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,
		0,501,503,1,0,0,0,502,500,1,0,0,0,503,504,5,17,0,0,504,37,1,0,0,0,505,
		506,3,126,63,0,506,507,3,24,12,0,507,516,3,120,60,0,508,512,5,9,0,0,509,
		511,5,69,0,0,510,509,1,0,0,0,511,514,1,0,0,0,512,510,1,0,0,0,512,513,1,
		0,0,0,513,515,1,0,0,0,514,512,1,0,0,0,515,517,3,60,30,0,516,508,1,0,0,
		0,516,517,1,0,0,0,517,518,1,0,0,0,518,519,5,12,0,0,519,39,1,0,0,0,520,
		527,3,64,32,0,521,527,3,66,33,0,522,527,3,56,28,0,523,527,3,50,25,0,524,
		527,3,52,26,0,525,527,3,54,27,0,526,520,1,0,0,0,526,521,1,0,0,0,526,522,
		1,0,0,0,526,523,1,0,0,0,526,524,1,0,0,0,526,525,1,0,0,0,527,41,1,0,0,0,
		528,533,3,60,30,0,529,533,3,44,22,0,530,533,3,46,23,0,531,533,3,48,24,
		0,532,528,1,0,0,0,532,529,1,0,0,0,532,530,1,0,0,0,532,531,1,0,0,0,533,
		43,1,0,0,0,534,535,5,41,0,0,535,45,1,0,0,0,536,537,5,42,0,0,537,47,1,0,
		0,0,538,540,5,43,0,0,539,541,3,60,30,0,540,539,1,0,0,0,540,541,1,0,0,0,
		541,49,1,0,0,0,542,543,3,44,22,0,543,544,5,12,0,0,544,51,1,0,0,0,545,546,
		3,46,23,0,546,547,5,12,0,0,547,53,1,0,0,0,548,550,5,43,0,0,549,551,3,60,
		30,0,550,549,1,0,0,0,550,551,1,0,0,0,551,552,1,0,0,0,552,558,5,12,0,0,
		553,554,5,43,0,0,554,555,3,62,31,0,555,556,5,69,0,0,556,558,1,0,0,0,557,
		548,1,0,0,0,557,553,1,0,0,0,558,55,1,0,0,0,559,560,3,60,30,0,560,561,5,
		12,0,0,561,566,1,0,0,0,562,563,3,62,31,0,563,564,5,69,0,0,564,566,1,0,
		0,0,565,559,1,0,0,0,565,562,1,0,0,0,566,57,1,0,0,0,567,568,3,62,31,0,568,
		569,5,69,0,0,569,574,1,0,0,0,570,571,3,60,30,0,571,572,5,12,0,0,572,574,
		1,0,0,0,573,567,1,0,0,0,573,570,1,0,0,0,574,59,1,0,0,0,575,576,6,30,-1,
		0,576,585,3,112,56,0,577,585,3,62,31,0,578,585,3,80,40,0,579,585,3,84,
		42,0,580,585,3,88,44,0,581,585,3,92,46,0,582,585,3,74,37,0,583,585,3,78,
		39,0,584,575,1,0,0,0,584,577,1,0,0,0,584,578,1,0,0,0,584,579,1,0,0,0,584,
		580,1,0,0,0,584,581,1,0,0,0,584,582,1,0,0,0,584,583,1,0,0,0,585,614,1,
		0,0,0,586,587,10,6,0,0,587,588,3,138,69,0,588,589,3,60,30,7,589,613,1,
		0,0,0,590,591,10,5,0,0,591,592,3,140,70,0,592,593,3,60,30,6,593,613,1,
		0,0,0,594,595,10,4,0,0,595,596,3,146,73,0,596,597,3,60,30,5,597,613,1,
		0,0,0,598,599,10,3,0,0,599,600,3,142,71,0,600,601,3,60,30,4,601,613,1,
		0,0,0,602,603,10,2,0,0,603,604,3,144,72,0,604,605,3,60,30,3,605,613,1,
		0,0,0,606,607,10,9,0,0,607,613,3,68,34,0,608,609,10,8,0,0,609,613,3,70,
		35,0,610,611,10,7,0,0,611,613,3,72,36,0,612,586,1,0,0,0,612,590,1,0,0,
		0,612,594,1,0,0,0,612,598,1,0,0,0,612,602,1,0,0,0,612,606,1,0,0,0,612,
		608,1,0,0,0,612,610,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,614,615,1,
		0,0,0,615,61,1,0,0,0,616,614,1,0,0,0,617,624,3,98,49,0,618,624,3,82,41,
		0,619,624,3,86,43,0,620,624,3,90,45,0,621,624,3,94,47,0,622,624,3,76,38,
		0,623,617,1,0,0,0,623,618,1,0,0,0,623,619,1,0,0,0,623,620,1,0,0,0,623,
		621,1,0,0,0,623,622,1,0,0,0,624,63,1,0,0,0,625,627,5,36,0,0,626,628,5,
		35,0,0,627,626,1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,631,3,126,63,
		0,630,632,3,120,60,0,631,630,1,0,0,0,631,632,1,0,0,0,632,633,1,0,0,0,633,
		637,5,9,0,0,634,636,5,69,0,0,635,634,1,0,0,0,636,639,1,0,0,0,637,635,1,
		0,0,0,637,638,1,0,0,0,638,640,1,0,0,0,639,637,1,0,0,0,640,641,3,58,29,
		0,641,65,1,0,0,0,642,643,5,36,0,0,643,644,3,126,63,0,644,646,3,24,12,0,
		645,647,3,120,60,0,646,645,1,0,0,0,646,647,1,0,0,0,647,648,1,0,0,0,648,
		652,5,9,0,0,649,651,5,69,0,0,650,649,1,0,0,0,651,654,1,0,0,0,652,650,1,
		0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,654,652,1,0,0,0,655,656,3,58,29,
		0,656,67,1,0,0,0,657,659,5,69,0,0,658,657,1,0,0,0,658,659,1,0,0,0,659,
		660,1,0,0,0,660,690,5,7,0,0,661,665,5,14,0,0,662,664,5,69,0,0,663,662,
		1,0,0,0,664,667,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,668,1,0,0,
		0,667,665,1,0,0,0,668,679,3,120,60,0,669,673,5,8,0,0,670,672,5,69,0,0,
		671,670,1,0,0,0,672,675,1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,676,
		1,0,0,0,675,673,1,0,0,0,676,678,3,120,60,0,677,669,1,0,0,0,678,681,1,0,
		0,0,679,677,1,0,0,0,679,680,1,0,0,0,680,685,1,0,0,0,681,679,1,0,0,0,682,
		684,5,69,0,0,683,682,1,0,0,0,684,687,1,0,0,0,685,683,1,0,0,0,685,686,1,
		0,0,0,686,688,1,0,0,0,687,685,1,0,0,0,688,689,5,15,0,0,689,691,1,0,0,0,
		690,661,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,693,3,126,63,0,693,
		697,5,14,0,0,694,696,5,69,0,0,695,694,1,0,0,0,696,699,1,0,0,0,697,695,
		1,0,0,0,697,698,1,0,0,0,698,714,1,0,0,0,699,697,1,0,0,0,700,711,3,60,30,
		0,701,705,5,8,0,0,702,704,5,69,0,0,703,702,1,0,0,0,704,707,1,0,0,0,705,
		703,1,0,0,0,705,706,1,0,0,0,706,708,1,0,0,0,707,705,1,0,0,0,708,710,3,
		60,30,0,709,701,1,0,0,0,710,713,1,0,0,0,711,709,1,0,0,0,711,712,1,0,0,
		0,712,715,1,0,0,0,713,711,1,0,0,0,714,700,1,0,0,0,714,715,1,0,0,0,715,
		719,1,0,0,0,716,718,5,69,0,0,717,716,1,0,0,0,718,721,1,0,0,0,719,717,1,
		0,0,0,719,720,1,0,0,0,720,722,1,0,0,0,721,719,1,0,0,0,722,723,5,15,0,0,
		723,69,1,0,0,0,724,728,5,14,0,0,725,727,5,69,0,0,726,725,1,0,0,0,727,730,
		1,0,0,0,728,726,1,0,0,0,728,729,1,0,0,0,729,745,1,0,0,0,730,728,1,0,0,
		0,731,742,3,60,30,0,732,736,5,8,0,0,733,735,5,69,0,0,734,733,1,0,0,0,735,
		738,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,739,1,0,0,0,738,736,1,
		0,0,0,739,741,3,60,30,0,740,732,1,0,0,0,741,744,1,0,0,0,742,740,1,0,0,
		0,742,743,1,0,0,0,743,746,1,0,0,0,744,742,1,0,0,0,745,731,1,0,0,0,745,
		746,1,0,0,0,746,750,1,0,0,0,747,749,5,69,0,0,748,747,1,0,0,0,749,752,1,
		0,0,0,750,748,1,0,0,0,750,751,1,0,0,0,751,753,1,0,0,0,752,750,1,0,0,0,
		753,754,5,15,0,0,754,71,1,0,0,0,755,757,5,69,0,0,756,755,1,0,0,0,756,757,
		1,0,0,0,757,758,1,0,0,0,758,759,5,7,0,0,759,760,3,126,63,0,760,73,1,0,
		0,0,761,762,3,126,63,0,762,766,5,9,0,0,763,765,5,69,0,0,764,763,1,0,0,
		0,765,768,1,0,0,0,766,764,1,0,0,0,766,767,1,0,0,0,767,769,1,0,0,0,768,
		766,1,0,0,0,769,770,3,60,30,0,770,75,1,0,0,0,771,772,3,126,63,0,772,776,
		5,9,0,0,773,775,5,69,0,0,774,773,1,0,0,0,775,778,1,0,0,0,776,774,1,0,0,
		0,776,777,1,0,0,0,777,779,1,0,0,0,778,776,1,0,0,0,779,780,3,62,31,0,780,
		77,1,0,0,0,781,783,3,24,12,0,782,784,3,120,60,0,783,782,1,0,0,0,783,784,
		1,0,0,0,784,785,1,0,0,0,785,789,5,1,0,0,786,788,5,69,0,0,787,786,1,0,0,
		0,788,791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,
		789,1,0,0,0,792,793,3,60,30,0,793,79,1,0,0,0,794,798,5,38,0,0,795,797,
		5,69,0,0,796,795,1,0,0,0,797,800,1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,
		0,799,801,1,0,0,0,800,798,1,0,0,0,801,802,5,14,0,0,802,803,3,96,48,0,803,
		807,5,15,0,0,804,806,5,69,0,0,805,804,1,0,0,0,806,809,1,0,0,0,807,805,
		1,0,0,0,807,808,1,0,0,0,808,810,1,0,0,0,809,807,1,0,0,0,810,811,3,42,21,
		0,811,81,1,0,0,0,812,816,5,38,0,0,813,815,5,69,0,0,814,813,1,0,0,0,815,
		818,1,0,0,0,816,814,1,0,0,0,816,817,1,0,0,0,817,819,1,0,0,0,818,816,1,
		0,0,0,819,820,5,14,0,0,820,821,3,96,48,0,821,825,5,15,0,0,822,824,5,69,
		0,0,823,822,1,0,0,0,824,827,1,0,0,0,825,823,1,0,0,0,825,826,1,0,0,0,826,
		828,1,0,0,0,827,825,1,0,0,0,828,829,3,62,31,0,829,83,1,0,0,0,830,834,5,
		38,0,0,831,833,5,69,0,0,832,831,1,0,0,0,833,836,1,0,0,0,834,832,1,0,0,
		0,834,835,1,0,0,0,835,837,1,0,0,0,836,834,1,0,0,0,837,838,5,14,0,0,838,
		839,3,96,48,0,839,843,5,15,0,0,840,842,5,69,0,0,841,840,1,0,0,0,842,845,
		1,0,0,0,843,841,1,0,0,0,843,844,1,0,0,0,844,846,1,0,0,0,845,843,1,0,0,
		0,846,847,3,60,30,0,847,851,5,39,0,0,848,850,5,69,0,0,849,848,1,0,0,0,
		850,853,1,0,0,0,851,849,1,0,0,0,851,852,1,0,0,0,852,854,1,0,0,0,853,851,
		1,0,0,0,854,855,3,60,30,0,855,85,1,0,0,0,856,860,5,38,0,0,857,859,5,69,
		0,0,858,857,1,0,0,0,859,862,1,0,0,0,860,858,1,0,0,0,860,861,1,0,0,0,861,
		863,1,0,0,0,862,860,1,0,0,0,863,864,5,14,0,0,864,865,3,96,48,0,865,869,
		5,15,0,0,866,868,5,69,0,0,867,866,1,0,0,0,868,871,1,0,0,0,869,867,1,0,
		0,0,869,870,1,0,0,0,870,872,1,0,0,0,871,869,1,0,0,0,872,873,3,60,30,0,
		873,877,5,39,0,0,874,876,5,69,0,0,875,874,1,0,0,0,876,879,1,0,0,0,877,
		875,1,0,0,0,877,878,1,0,0,0,878,880,1,0,0,0,879,877,1,0,0,0,880,881,3,
		62,31,0,881,87,1,0,0,0,882,886,5,40,0,0,883,885,5,69,0,0,884,883,1,0,0,
		0,885,888,1,0,0,0,886,884,1,0,0,0,886,887,1,0,0,0,887,889,1,0,0,0,888,
		886,1,0,0,0,889,890,5,14,0,0,890,891,3,96,48,0,891,895,5,15,0,0,892,894,
		5,69,0,0,893,892,1,0,0,0,894,897,1,0,0,0,895,893,1,0,0,0,895,896,1,0,0,
		0,896,898,1,0,0,0,897,895,1,0,0,0,898,899,3,42,21,0,899,89,1,0,0,0,900,
		904,5,40,0,0,901,903,5,69,0,0,902,901,1,0,0,0,903,906,1,0,0,0,904,902,
		1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,0,906,904,1,0,0,0,907,908,5,14,0,
		0,908,909,3,96,48,0,909,913,5,15,0,0,910,912,5,69,0,0,911,910,1,0,0,0,
		912,915,1,0,0,0,913,911,1,0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,913,
		1,0,0,0,916,917,3,62,31,0,917,91,1,0,0,0,918,922,5,40,0,0,919,921,5,69,
		0,0,920,919,1,0,0,0,921,924,1,0,0,0,922,920,1,0,0,0,922,923,1,0,0,0,923,
		925,1,0,0,0,924,922,1,0,0,0,925,926,5,14,0,0,926,927,3,96,48,0,927,931,
		5,15,0,0,928,930,5,69,0,0,929,928,1,0,0,0,930,933,1,0,0,0,931,929,1,0,
		0,0,931,932,1,0,0,0,932,934,1,0,0,0,933,931,1,0,0,0,934,935,3,60,30,0,
		935,939,5,39,0,0,936,938,5,69,0,0,937,936,1,0,0,0,938,941,1,0,0,0,939,
		937,1,0,0,0,939,940,1,0,0,0,940,942,1,0,0,0,941,939,1,0,0,0,942,943,3,
		60,30,0,943,93,1,0,0,0,944,948,5,40,0,0,945,947,5,69,0,0,946,945,1,0,0,
		0,947,950,1,0,0,0,948,946,1,0,0,0,948,949,1,0,0,0,949,951,1,0,0,0,950,
		948,1,0,0,0,951,952,5,14,0,0,952,953,3,96,48,0,953,957,5,15,0,0,954,956,
		5,69,0,0,955,954,1,0,0,0,956,959,1,0,0,0,957,955,1,0,0,0,957,958,1,0,0,
		0,958,960,1,0,0,0,959,957,1,0,0,0,960,961,3,60,30,0,961,965,5,39,0,0,962,
		964,5,69,0,0,963,962,1,0,0,0,964,967,1,0,0,0,965,963,1,0,0,0,965,966,1,
		0,0,0,966,968,1,0,0,0,967,965,1,0,0,0,968,969,3,62,31,0,969,95,1,0,0,0,
		970,985,6,48,-1,0,971,975,3,100,50,0,972,974,5,69,0,0,973,972,1,0,0,0,
		974,977,1,0,0,0,975,973,1,0,0,0,975,976,1,0,0,0,976,978,1,0,0,0,977,975,
		1,0,0,0,978,982,5,2,0,0,979,981,5,69,0,0,980,979,1,0,0,0,981,984,1,0,0,
		0,982,980,1,0,0,0,982,983,1,0,0,0,983,986,1,0,0,0,984,982,1,0,0,0,985,
		971,1,0,0,0,985,986,1,0,0,0,986,987,1,0,0,0,987,1005,3,60,30,0,988,992,
		5,14,0,0,989,991,5,69,0,0,990,989,1,0,0,0,991,994,1,0,0,0,992,990,1,0,
		0,0,992,993,1,0,0,0,993,995,1,0,0,0,994,992,1,0,0,0,995,999,3,96,48,0,
		996,998,5,69,0,0,997,996,1,0,0,0,998,1001,1,0,0,0,999,997,1,0,0,0,999,
		1000,1,0,0,0,1000,1002,1,0,0,0,1001,999,1,0,0,0,1002,1003,5,15,0,0,1003,
		1005,1,0,0,0,1004,970,1,0,0,0,1004,988,1,0,0,0,1005,1014,1,0,0,0,1006,
		1007,10,3,0,0,1007,1008,5,45,0,0,1008,1013,3,96,48,4,1009,1010,10,2,0,
		0,1010,1011,5,46,0,0,1011,1013,3,96,48,3,1012,1006,1,0,0,0,1012,1009,1,
		0,0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,1014,1015,1,0,0,0,1015,97,1,
		0,0,0,1016,1014,1,0,0,0,1017,1021,5,16,0,0,1018,1020,5,69,0,0,1019,1018,
		1,0,0,0,1020,1023,1,0,0,0,1021,1019,1,0,0,0,1021,1022,1,0,0,0,1022,1033,
		1,0,0,0,1023,1021,1,0,0,0,1024,1026,5,69,0,0,1025,1024,1,0,0,0,1026,1029,
		1,0,0,0,1027,1025,1,0,0,0,1027,1028,1,0,0,0,1028,1030,1,0,0,0,1029,1027,
		1,0,0,0,1030,1032,3,40,20,0,1031,1027,1,0,0,0,1032,1035,1,0,0,0,1033,1031,
		1,0,0,0,1033,1034,1,0,0,0,1034,1039,1,0,0,0,1035,1033,1,0,0,0,1036,1038,
		5,69,0,0,1037,1036,1,0,0,0,1038,1041,1,0,0,0,1039,1037,1,0,0,0,1039,1040,
		1,0,0,0,1040,1042,1,0,0,0,1041,1039,1,0,0,0,1042,1046,3,60,30,0,1043,1045,
		5,69,0,0,1044,1043,1,0,0,0,1045,1048,1,0,0,0,1046,1044,1,0,0,0,1046,1047,
		1,0,0,0,1047,1049,1,0,0,0,1048,1046,1,0,0,0,1049,1050,5,17,0,0,1050,1078,
		1,0,0,0,1051,1055,5,16,0,0,1052,1054,5,69,0,0,1053,1052,1,0,0,0,1054,1057,
		1,0,0,0,1055,1053,1,0,0,0,1055,1056,1,0,0,0,1056,1067,1,0,0,0,1057,1055,
		1,0,0,0,1058,1060,5,69,0,0,1059,1058,1,0,0,0,1060,1063,1,0,0,0,1061,1059,
		1,0,0,0,1061,1062,1,0,0,0,1062,1064,1,0,0,0,1063,1061,1,0,0,0,1064,1066,
		3,40,20,0,1065,1061,1,0,0,0,1066,1069,1,0,0,0,1067,1065,1,0,0,0,1067,1068,
		1,0,0,0,1068,1073,1,0,0,0,1069,1067,1,0,0,0,1070,1072,5,69,0,0,1071,1070,
		1,0,0,0,1072,1075,1,0,0,0,1073,1071,1,0,0,0,1073,1074,1,0,0,0,1074,1076,
		1,0,0,0,1075,1073,1,0,0,0,1076,1078,5,17,0,0,1077,1017,1,0,0,0,1077,1051,
		1,0,0,0,1078,99,1,0,0,0,1079,1085,3,102,51,0,1080,1085,3,110,55,0,1081,
		1085,3,106,53,0,1082,1085,3,104,52,0,1083,1085,3,108,54,0,1084,1079,1,
		0,0,0,1084,1080,1,0,0,0,1084,1081,1,0,0,0,1084,1082,1,0,0,0,1084,1083,
		1,0,0,0,1085,101,1,0,0,0,1086,1087,3,106,53,0,1087,1088,3,120,60,0,1088,
		1096,1,0,0,0,1089,1090,3,108,54,0,1090,1091,3,120,60,0,1091,1096,1,0,0,
		0,1092,1093,3,120,60,0,1093,1094,3,104,52,0,1094,1096,1,0,0,0,1095,1086,
		1,0,0,0,1095,1089,1,0,0,0,1095,1092,1,0,0,0,1096,103,1,0,0,0,1097,1101,
		5,14,0,0,1098,1100,5,69,0,0,1099,1098,1,0,0,0,1100,1103,1,0,0,0,1101,1099,
		1,0,0,0,1101,1102,1,0,0,0,1102,1118,1,0,0,0,1103,1101,1,0,0,0,1104,1115,
		3,100,50,0,1105,1109,5,8,0,0,1106,1108,5,69,0,0,1107,1106,1,0,0,0,1108,
		1111,1,0,0,0,1109,1107,1,0,0,0,1109,1110,1,0,0,0,1110,1112,1,0,0,0,1111,
		1109,1,0,0,0,1112,1114,3,100,50,0,1113,1105,1,0,0,0,1114,1117,1,0,0,0,
		1115,1113,1,0,0,0,1115,1116,1,0,0,0,1116,1119,1,0,0,0,1117,1115,1,0,0,
		0,1118,1104,1,0,0,0,1118,1119,1,0,0,0,1119,1123,1,0,0,0,1120,1122,5,69,
		0,0,1121,1120,1,0,0,0,1122,1125,1,0,0,0,1123,1121,1,0,0,0,1123,1124,1,
		0,0,0,1124,1126,1,0,0,0,1125,1123,1,0,0,0,1126,1127,5,15,0,0,1127,105,
		1,0,0,0,1128,1129,3,126,63,0,1129,107,1,0,0,0,1130,1131,5,66,0,0,1131,
		109,1,0,0,0,1132,1133,3,118,59,0,1133,111,1,0,0,0,1134,1139,3,118,59,0,
		1135,1139,3,114,57,0,1136,1139,3,116,58,0,1137,1139,3,126,63,0,1138,1134,
		1,0,0,0,1138,1135,1,0,0,0,1138,1136,1,0,0,0,1138,1137,1,0,0,0,1139,113,
		1,0,0,0,1140,1144,5,18,0,0,1141,1143,5,69,0,0,1142,1141,1,0,0,0,1143,1146,
		1,0,0,0,1144,1142,1,0,0,0,1144,1145,1,0,0,0,1145,1147,1,0,0,0,1146,1144,
		1,0,0,0,1147,1158,3,120,60,0,1148,1152,5,8,0,0,1149,1151,5,69,0,0,1150,
		1149,1,0,0,0,1151,1154,1,0,0,0,1152,1150,1,0,0,0,1152,1153,1,0,0,0,1153,
		1155,1,0,0,0,1154,1152,1,0,0,0,1155,1157,3,120,60,0,1156,1148,1,0,0,0,
		1157,1160,1,0,0,0,1158,1156,1,0,0,0,1158,1159,1,0,0,0,1159,1164,1,0,0,
		0,1160,1158,1,0,0,0,1161,1163,5,69,0,0,1162,1161,1,0,0,0,1163,1166,1,0,
		0,0,1164,1162,1,0,0,0,1164,1165,1,0,0,0,1165,1167,1,0,0,0,1166,1164,1,
		0,0,0,1167,1168,5,19,0,0,1168,1170,1,0,0,0,1169,1140,1,0,0,0,1169,1170,
		1,0,0,0,1170,1171,1,0,0,0,1171,1172,3,124,62,0,1172,1176,5,14,0,0,1173,
		1175,5,69,0,0,1174,1173,1,0,0,0,1175,1178,1,0,0,0,1176,1174,1,0,0,0,1176,
		1177,1,0,0,0,1177,1193,1,0,0,0,1178,1176,1,0,0,0,1179,1190,3,60,30,0,1180,
		1184,5,8,0,0,1181,1183,5,69,0,0,1182,1181,1,0,0,0,1183,1186,1,0,0,0,1184,
		1182,1,0,0,0,1184,1185,1,0,0,0,1185,1187,1,0,0,0,1186,1184,1,0,0,0,1187,
		1189,3,60,30,0,1188,1180,1,0,0,0,1189,1192,1,0,0,0,1190,1188,1,0,0,0,1190,
		1191,1,0,0,0,1191,1194,1,0,0,0,1192,1190,1,0,0,0,1193,1179,1,0,0,0,1193,
		1194,1,0,0,0,1194,1198,1,0,0,0,1195,1197,5,69,0,0,1196,1195,1,0,0,0,1197,
		1200,1,0,0,0,1198,1196,1,0,0,0,1198,1199,1,0,0,0,1199,1201,1,0,0,0,1200,
		1198,1,0,0,0,1201,1202,5,15,0,0,1202,115,1,0,0,0,1203,1207,5,18,0,0,1204,
		1206,5,69,0,0,1205,1204,1,0,0,0,1206,1209,1,0,0,0,1207,1205,1,0,0,0,1207,
		1208,1,0,0,0,1208,1210,1,0,0,0,1209,1207,1,0,0,0,1210,1221,3,120,60,0,
		1211,1215,5,8,0,0,1212,1214,5,69,0,0,1213,1212,1,0,0,0,1214,1217,1,0,0,
		0,1215,1213,1,0,0,0,1215,1216,1,0,0,0,1216,1218,1,0,0,0,1217,1215,1,0,
		0,0,1218,1220,3,120,60,0,1219,1211,1,0,0,0,1220,1223,1,0,0,0,1221,1219,
		1,0,0,0,1221,1222,1,0,0,0,1222,1227,1,0,0,0,1223,1221,1,0,0,0,1224,1226,
		5,69,0,0,1225,1224,1,0,0,0,1226,1229,1,0,0,0,1227,1225,1,0,0,0,1227,1228,
		1,0,0,0,1228,1230,1,0,0,0,1229,1227,1,0,0,0,1230,1231,5,19,0,0,1231,1233,
		1,0,0,0,1232,1203,1,0,0,0,1232,1233,1,0,0,0,1233,1234,1,0,0,0,1234,1235,
		3,126,63,0,1235,1239,5,14,0,0,1236,1238,5,69,0,0,1237,1236,1,0,0,0,1238,
		1241,1,0,0,0,1239,1237,1,0,0,0,1239,1240,1,0,0,0,1240,1256,1,0,0,0,1241,
		1239,1,0,0,0,1242,1253,3,60,30,0,1243,1247,5,8,0,0,1244,1246,5,69,0,0,
		1245,1244,1,0,0,0,1246,1249,1,0,0,0,1247,1245,1,0,0,0,1247,1248,1,0,0,
		0,1248,1250,1,0,0,0,1249,1247,1,0,0,0,1250,1252,3,60,30,0,1251,1243,1,
		0,0,0,1252,1255,1,0,0,0,1253,1251,1,0,0,0,1253,1254,1,0,0,0,1254,1257,
		1,0,0,0,1255,1253,1,0,0,0,1256,1242,1,0,0,0,1256,1257,1,0,0,0,1257,1261,
		1,0,0,0,1258,1260,5,69,0,0,1259,1258,1,0,0,0,1260,1263,1,0,0,0,1261,1259,
		1,0,0,0,1261,1262,1,0,0,0,1262,1264,1,0,0,0,1263,1261,1,0,0,0,1264,1265,
		5,15,0,0,1265,117,1,0,0,0,1266,1272,3,136,68,0,1267,1272,3,132,66,0,1268,
		1272,3,130,65,0,1269,1272,3,128,64,0,1270,1272,3,134,67,0,1271,1266,1,
		0,0,0,1271,1267,1,0,0,0,1271,1268,1,0,0,0,1271,1269,1,0,0,0,1271,1270,
		1,0,0,0,1272,119,1,0,0,0,1273,1277,5,18,0,0,1274,1276,5,69,0,0,1275,1274,
		1,0,0,0,1276,1279,1,0,0,0,1277,1275,1,0,0,0,1277,1278,1,0,0,0,1278,1280,
		1,0,0,0,1279,1277,1,0,0,0,1280,1291,3,120,60,0,1281,1285,5,8,0,0,1282,
		1284,5,69,0,0,1283,1282,1,0,0,0,1284,1287,1,0,0,0,1285,1283,1,0,0,0,1285,
		1286,1,0,0,0,1286,1288,1,0,0,0,1287,1285,1,0,0,0,1288,1290,3,120,60,0,
		1289,1281,1,0,0,0,1290,1293,1,0,0,0,1291,1289,1,0,0,0,1291,1292,1,0,0,
		0,1292,1297,1,0,0,0,1293,1291,1,0,0,0,1294,1296,5,69,0,0,1295,1294,1,0,
		0,0,1296,1299,1,0,0,0,1297,1295,1,0,0,0,1297,1298,1,0,0,0,1298,1300,1,
		0,0,0,1299,1297,1,0,0,0,1300,1301,5,19,0,0,1301,1303,1,0,0,0,1302,1273,
		1,0,0,0,1302,1303,1,0,0,0,1303,1304,1,0,0,0,1304,1307,3,124,62,0,1305,
		1307,3,122,61,0,1306,1302,1,0,0,0,1306,1305,1,0,0,0,1307,121,1,0,0,0,1308,
		1309,5,71,0,0,1309,1310,3,24,12,0,1310,1311,3,120,60,0,1311,123,1,0,0,
		0,1312,1313,5,64,0,0,1313,125,1,0,0,0,1314,1315,5,65,0,0,1315,127,1,0,
		0,0,1316,1317,5,63,0,0,1317,129,1,0,0,0,1318,1319,5,62,0,0,1319,131,1,
		0,0,0,1320,1321,5,57,0,0,1321,133,1,0,0,0,1322,1323,7,0,0,0,1323,135,1,
		0,0,0,1324,1325,7,1,0,0,1325,137,1,0,0,0,1326,1328,7,2,0,0,1327,1329,5,
		69,0,0,1328,1327,1,0,0,0,1328,1329,1,0,0,0,1329,139,1,0,0,0,1330,1332,
		7,3,0,0,1331,1333,5,69,0,0,1332,1331,1,0,0,0,1332,1333,1,0,0,0,1333,141,
		1,0,0,0,1334,1336,5,30,0,0,1335,1337,5,69,0,0,1336,1335,1,0,0,0,1336,1337,
		1,0,0,0,1337,143,1,0,0,0,1338,1340,5,31,0,0,1339,1341,5,69,0,0,1340,1339,
		1,0,0,0,1340,1341,1,0,0,0,1341,145,1,0,0,0,1342,1344,7,4,0,0,1343,1345,
		5,69,0,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,147,1,0,0,0,173,152,
		158,165,170,176,191,195,199,205,212,217,223,230,233,239,244,248,256,260,
		264,269,274,278,285,292,300,306,312,317,326,334,340,346,358,366,372,375,
		380,392,400,406,409,414,420,429,435,442,447,453,461,467,476,482,489,494,
		500,512,516,526,532,540,550,557,565,573,584,612,614,623,627,631,637,646,
		652,658,665,673,679,685,690,697,705,711,714,719,728,736,742,745,750,756,
		766,776,783,789,798,807,816,825,834,843,851,860,869,877,886,895,904,913,
		922,931,939,948,957,965,975,982,985,992,999,1004,1012,1014,1021,1027,1033,
		1039,1046,1055,1061,1067,1073,1077,1084,1095,1101,1109,1115,1118,1123,
		1138,1144,1152,1158,1164,1169,1176,1184,1190,1193,1198,1207,1215,1221,
		1227,1232,1239,1247,1253,1256,1261,1271,1277,1285,1291,1297,1302,1306,
		1328,1332,1336,1340,1344
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Compiler.Parser
